package payroll_sys;

import java.awt.Color;
import java.awt.Font;
import java.awt.Frame;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class MainForm3 extends javax.swing.JFrame {

   Connection con;
    Statement stmt;
    ResultSet rs;
    String dd, dd1, dd2;
    String fn, ln, mn, ll, pg, dp, yr, fc;
    String ns, mt, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, t1, t2, t3, t4, rm, TNUR2, TNUP2,  TSS22, TSU2;
    String TSU, TSS, TNUP, TCP, TCP2, RM, fail;
    int cp1, cp2, cp3, Cno, cp5, cp6; 
    double CGPA, cp4;
    
    int rowCount = -1;
    public MainForm3() {
        initComponents();
        
          
      
        //this.setUndecorated(true);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        this.pack();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        this.setResizable(false);
        
     
          txtS1.addKeyListener(new KeyAdapter() {
         public void keyPressed(KeyEvent ke) {
            String value = txtS1.getText();
            int l = value.length();
            if (ke.getKeyChar() >= '0' && ke.getKeyChar() <= '9') {
               txtS1.setEditable(true);
               //label.setText("");
            } else {
               txtS1.setEditable(false);
               //label.setText("* Enter only numeric digits(0-9)");
               if (!txtS1.getText().isEmpty()) {
                    
                   txtS1.setEditable(true);
                    //label.setText("");
                }
            }
         }
      });
      setVisible(true);
          
       
        /////
        
       
       
            CP1.setVisible(false);
            CP2.setVisible(false);
            CP3.setVisible(false);
            CP4.setVisible(false);
            CP5.setVisible(false);
            CP6.setVisible(false);
            CP7.setVisible(false);
            CP8.setVisible(false);
            CP9.setVisible(false);
            CP10.setVisible(false);
            CP11.setVisible(false);
            CP12.setVisible(false);
            CP13.setVisible(false);
            CP14.setVisible(false);
            CP15.setVisible(false);
            CP16.setVisible(false);
            
            lblTUCP.setVisible(false);
            lblTCP.setVisible(false);
            lblTNUP.setVisible(false);
            lblTUP.setVisible(false);
            
            lblTUNIT.setVisible(false);
            lblMSG.setVisible(true);
            lblTU.setVisible(false);
            lblGPA.setVisible(false);
            lblGP.setVisible(false);
            lblCGPA.setVisible(false);
            lblCGP.setVisible(false);
            btnCompt.setVisible(false);
            
            btnSave.setVisible(false);
            lblTCP1.setVisible(false);
            lblRM.setVisible(false);
        //////
        
        
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        //get current date time with Date()
        Date date = new Date();
        lblTime.setText(dateFormat.format(date));
        
        //get current date time with Calendar()
        Calendar cal = Calendar.getInstance();
        lblTime.setText(dateFormat.format(cal.getTime()));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        F_user = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        lblTime = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        btnStd = new javax.swing.JButton();
        btnStds = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        gnt_panel = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        txtMatricNo1 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        txtYear1 = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        CP1 = new javax.swing.JPanel();
        txtS1 = new javax.swing.JTextField();
        txtU1 = new javax.swing.JTextField();
        lblG1 = new javax.swing.JLabel();
        CC1 = new javax.swing.JComboBox<>();
        btnCompt = new javax.swing.JButton();
        lblGPA = new javax.swing.JLabel();
        lblGP = new javax.swing.JLabel();
        lblMSG = new javax.swing.JLabel();
        lblTU = new javax.swing.JLabel();
        CP2 = new javax.swing.JPanel();
        txtS2 = new javax.swing.JTextField();
        txtU2 = new javax.swing.JTextField();
        CC2 = new javax.swing.JComboBox<>();
        lblG2 = new javax.swing.JLabel();
        CP6 = new javax.swing.JPanel();
        txtS6 = new javax.swing.JTextField();
        txtU5 = new javax.swing.JTextField();
        CC6 = new javax.swing.JComboBox<>();
        lblG6 = new javax.swing.JLabel();
        CP3 = new javax.swing.JPanel();
        txtS3 = new javax.swing.JTextField();
        txtU3 = new javax.swing.JTextField();
        lblG3 = new javax.swing.JLabel();
        CC3 = new javax.swing.JComboBox<>();
        CP5 = new javax.swing.JPanel();
        txtS5 = new javax.swing.JTextField();
        txtU4 = new javax.swing.JTextField();
        CC5 = new javax.swing.JComboBox<>();
        lblG5 = new javax.swing.JLabel();
        CP9 = new javax.swing.JPanel();
        txtS9 = new javax.swing.JTextField();
        txtU7 = new javax.swing.JTextField();
        CC9 = new javax.swing.JComboBox<>();
        lblG9 = new javax.swing.JLabel();
        CP7 = new javax.swing.JPanel();
        txtS4 = new javax.swing.JTextField();
        txtU6 = new javax.swing.JTextField();
        CC7 = new javax.swing.JComboBox<>();
        lblG7 = new javax.swing.JLabel();
        CP10 = new javax.swing.JPanel();
        txtS7 = new javax.swing.JTextField();
        txtU8 = new javax.swing.JTextField();
        CC10 = new javax.swing.JComboBox<>();
        lblG10 = new javax.swing.JLabel();
        CP11 = new javax.swing.JPanel();
        txtS10 = new javax.swing.JTextField();
        txtU9 = new javax.swing.JTextField();
        CC11 = new javax.swing.JComboBox<>();
        sbyDepart14 = new javax.swing.JComboBox<>();
        sbyDepart18 = new javax.swing.JComboBox<>();
        lblG11 = new javax.swing.JLabel();
        CP8 = new javax.swing.JPanel();
        txtS8 = new javax.swing.JTextField();
        txtU11 = new javax.swing.JTextField();
        CC8 = new javax.swing.JComboBox<>();
        sbyDepart11 = new javax.swing.JComboBox<>();
        sbyDepart12 = new javax.swing.JComboBox<>();
        lblG8 = new javax.swing.JLabel();
        CP4 = new javax.swing.JPanel();
        txtS11 = new javax.swing.JTextField();
        txtU10 = new javax.swing.JTextField();
        CC4 = new javax.swing.JComboBox<>();
        lblG4 = new javax.swing.JLabel();
        CP12 = new javax.swing.JPanel();
        txtS16 = new javax.swing.JTextField();
        lblG12 = new javax.swing.JLabel();
        txtU12 = new javax.swing.JTextField();
        CC12 = new javax.swing.JComboBox<>();
        CP14 = new javax.swing.JPanel();
        txtS14 = new javax.swing.JTextField();
        txtU14 = new javax.swing.JTextField();
        lblG14 = new javax.swing.JLabel();
        CC14 = new javax.swing.JComboBox<>();
        CP13 = new javax.swing.JPanel();
        txtS13 = new javax.swing.JTextField();
        txtU13 = new javax.swing.JTextField();
        lblG13 = new javax.swing.JLabel();
        CC13 = new javax.swing.JComboBox<>();
        CP15 = new javax.swing.JPanel();
        txtS15 = new javax.swing.JTextField();
        lblG15 = new javax.swing.JLabel();
        txtU15 = new javax.swing.JTextField();
        CC15 = new javax.swing.JComboBox<>();
        CP16 = new javax.swing.JPanel();
        txtS12 = new javax.swing.JTextField();
        lblG16 = new javax.swing.JLabel();
        txtU16 = new javax.swing.JTextField();
        CC16 = new javax.swing.JComboBox<>();
        lblTUNIT = new javax.swing.JLabel();
        lblTUP = new javax.swing.JLabel();
        lblTNUP = new javax.swing.JLabel();
        lblTCP = new javax.swing.JLabel();
        lblTUCP = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        lblTCP1 = new javax.swing.JLabel();
        lblRM = new javax.swing.JLabel();
        lblCGPA = new javax.swing.JLabel();
        lblCGP = new javax.swing.JLabel();
        lblRM1 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtFaculty = new javax.swing.JTextField();
        txtDepart = new javax.swing.JTextField();
        txtProg = new javax.swing.JTextField();
        drpNOC = new javax.swing.JComboBox<>();
        jLabel26 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        drpSem = new javax.swing.JComboBox<>();
        drpLevel = new javax.swing.JComboBox<>();
        jLabel29 = new javax.swing.JLabel();
        F_user3 = new javax.swing.JLabel();
        jButton12 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 153));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        F_user.setFont(new java.awt.Font("Perpetua", 0, 24)); // NOI18N
        F_user.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(F_user, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 10, 200, 41));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel7.setBackground(new java.awt.Color(0, 204, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/payroll_sys/b.png"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("RESULT ANALYSER DASHBOARD");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 530, 70));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 54, 800, 3));

        lblTime.setBackground(new java.awt.Color(38, 17, 87));
        lblTime.setFont(new java.awt.Font("Lucida Handwriting", 1, 14)); // NOI18N
        lblTime.setForeground(new java.awt.Color(255, 255, 255));
        lblTime.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel1.add(lblTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 10, 270, 40));

        jLabel14.setBackground(new java.awt.Color(255, 255, 255));
        jLabel14.setFont(new java.awt.Font("Perpetua", 0, 24)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 0, 0));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Logout");
        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 10, 100, 40));

        btnStd.setBackground(new java.awt.Color(241, 247, 247));
        btnStd.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnStd.setForeground(new java.awt.Color(51, 51, 51));
        btnStd.setText("NEW STUDENT");
        btnStd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStdActionPerformed(evt);
            }
        });
        jPanel1.add(btnStd, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 210, 40));

        btnStds.setBackground(new java.awt.Color(241, 247, 247));
        btnStds.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnStds.setForeground(new java.awt.Color(51, 51, 51));
        btnStds.setText("VIEW STUDENTS");
        btnStds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStdsActionPerformed(evt);
            }
        });
        jPanel1.add(btnStds, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 210, 40));

        jButton10.setBackground(new java.awt.Color(241, 247, 247));
        jButton10.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton10.setForeground(new java.awt.Color(51, 51, 51));
        jButton10.setText("ALL RESULTS");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 310, 210, 40));

        gnt_panel.setBackground(new java.awt.Color(252, 252, 252));
        gnt_panel.setMinimumSize(new java.awt.Dimension(932, 611));
        gnt_panel.setPreferredSize(new java.awt.Dimension(932, 611));
        gnt_panel.setRequestFocusEnabled(false);
        gnt_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel12.setFont(new java.awt.Font("Lucida Handwriting", 0, 36)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 102));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Generate Student Result");
        gnt_panel.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, 540, 40));

        txtMatricNo1.setEditable(false);
        txtMatricNo1.setBackground(new java.awt.Color(255, 255, 255));
        txtMatricNo1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtMatricNo1.setBorder(null);
        gnt_panel.add(txtMatricNo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 90, 280, 30));

        jLabel20.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        jLabel20.setText("Matric No :");
        gnt_panel.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 90, 90, 30));

        jLabel21.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        jLabel21.setText("Faculty :");
        gnt_panel.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 80, 30));

        jLabel22.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        jLabel22.setText("No of Courses :");
        gnt_panel.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 250, 130, 30));

        jLabel23.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        jLabel23.setText("Department :");
        gnt_panel.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 140, 100, 30));

        txtYear1.setEditable(false);
        txtYear1.setBackground(new java.awt.Color(255, 255, 255));
        txtYear1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtYear1.setBorder(null);
        txtYear1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtYear1ActionPerformed(evt);
            }
        });
        gnt_panel.add(txtYear1, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 190, 280, 30));

        jLabel25.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        jLabel25.setText("Year :");
        gnt_panel.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 190, 60, 30));

        jPanel4.setBackground(new java.awt.Color(102, 102, 102));
        jPanel4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        CP1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtS1.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtS1.setForeground(new java.awt.Color(153, 153, 153));
        txtS1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtS1.setText("0");
        txtS1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtS1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtS1FocusLost(evt);
            }
        });
        txtS1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtS1MouseClicked(evt);
            }
        });
        txtS1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtS1InputMethodTextChanged(evt);
            }
        });
        CP1.add(txtS1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 50, 40));

        txtU1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtU1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtU1.setText("0");
        txtU1.setEnabled(false);
        txtU1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtU1MouseClicked(evt);
            }
        });
        CP1.add(txtU1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, 60, 40));

        lblG1.setBackground(new java.awt.Color(255, 255, 255));
        lblG1.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblG1.setForeground(new java.awt.Color(51, 51, 51));
        lblG1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblG1.setOpaque(true);
        CP1.add(lblG1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 30, 40));

        CC1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CC1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --" }));
        CC1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CC1ActionPerformed(evt);
            }
        });
        CP1.add(CC1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        jPanel4.add(CP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 240, 40));

        btnCompt.setBackground(new java.awt.Color(0, 153, 204));
        btnCompt.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        btnCompt.setForeground(new java.awt.Color(255, 255, 255));
        btnCompt.setText("COMPUTE");
        btnCompt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComptActionPerformed(evt);
            }
        });
        jPanel4.add(btnCompt, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, 150, 40));

        lblGPA.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblGPA.setForeground(new java.awt.Color(153, 204, 0));
        lblGPA.setText("0");
        jPanel4.add(lblGPA, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 240, 80, 30));

        lblGP.setFont(new java.awt.Font("Perpetua", 1, 18)); // NOI18N
        lblGP.setForeground(new java.awt.Color(255, 255, 255));
        lblGP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblGP.setText("GPA :");
        jPanel4.add(lblGP, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 240, 60, 30));

        lblMSG.setFont(new java.awt.Font("Perpetua", 1, 36)); // NOI18N
        lblMSG.setForeground(new java.awt.Color(255, 255, 255));
        lblMSG.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMSG.setText("Select the no of courses");
        jPanel4.add(lblMSG, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 100, 520, 50));

        lblTU.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblTU.setForeground(new java.awt.Color(153, 204, 0));
        lblTU.setText("0");
        jPanel4.add(lblTU, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 280, 70, 30));

        CP2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtS2.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtS2.setForeground(new java.awt.Color(153, 153, 153));
        txtS2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtS2.setText("0");
        txtS2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtS2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtS2FocusLost(evt);
            }
        });
        txtS2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtS2MouseClicked(evt);
            }
        });
        txtS2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtS2ActionPerformed(evt);
            }
        });
        CP2.add(txtS2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 50, 40));

        txtU2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtU2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtU2.setText("0");
        txtU2.setEnabled(false);
        CP2.add(txtU2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, 60, 40));

        CC2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CC2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --" }));
        CC2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CC2ActionPerformed(evt);
            }
        });
        CP2.add(CC2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        lblG2.setBackground(new java.awt.Color(255, 255, 255));
        lblG2.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblG2.setForeground(new java.awt.Color(51, 51, 51));
        lblG2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblG2.setOpaque(true);
        CP2.add(lblG2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 30, 40));

        jPanel4.add(CP2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, 240, 40));

        CP6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtS6.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtS6.setForeground(new java.awt.Color(153, 153, 153));
        txtS6.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtS6.setText("0");
        txtS6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtS6FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtS6FocusLost(evt);
            }
        });
        txtS6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtS6MouseClicked(evt);
            }
        });
        CP6.add(txtS6, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 50, 40));

        txtU5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtU5.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtU5.setText("0");
        txtU5.setEnabled(false);
        CP6.add(txtU5, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, 60, 40));

        CC6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CC6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --" }));
        CC6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CC6ActionPerformed(evt);
            }
        });
        CP6.add(CC6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        lblG6.setBackground(new java.awt.Color(255, 255, 255));
        lblG6.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblG6.setForeground(new java.awt.Color(51, 51, 51));
        lblG6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblG6.setOpaque(true);
        CP6.add(lblG6, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 30, 40));

        jPanel4.add(CP6, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 70, 240, 40));

        CP3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtS3.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtS3.setForeground(new java.awt.Color(153, 153, 153));
        txtS3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtS3.setText("0");
        txtS3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtS3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtS3FocusLost(evt);
            }
        });
        txtS3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtS3MouseClicked(evt);
            }
        });
        txtS3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtS3ActionPerformed(evt);
            }
        });
        CP3.add(txtS3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 60, 40));

        txtU3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtU3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtU3.setText("0");
        txtU3.setEnabled(false);
        CP3.add(txtU3, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 50, 40));

        lblG3.setBackground(new java.awt.Color(255, 255, 255));
        lblG3.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblG3.setForeground(new java.awt.Color(51, 51, 51));
        lblG3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblG3.setOpaque(true);
        CP3.add(lblG3, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 30, 40));

        CC3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CC3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --" }));
        CC3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CC3ActionPerformed(evt);
            }
        });
        CP3.add(CC3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        jPanel4.add(CP3, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 10, 240, 40));

        CP5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtS5.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtS5.setForeground(new java.awt.Color(153, 153, 153));
        txtS5.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtS5.setText("0");
        txtS5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtS5FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtS5FocusLost(evt);
            }
        });
        txtS5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtS5MouseClicked(evt);
            }
        });
        txtS5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtS5ActionPerformed(evt);
            }
        });
        CP5.add(txtS5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 50, 40));

        txtU4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtU4.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtU4.setText("0");
        txtU4.setEnabled(false);
        CP5.add(txtU4, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, 60, 40));

        CC5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CC5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --" }));
        CC5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CC5ActionPerformed(evt);
            }
        });
        CP5.add(CC5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        lblG5.setBackground(new java.awt.Color(255, 255, 255));
        lblG5.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblG5.setForeground(new java.awt.Color(51, 51, 51));
        lblG5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblG5.setOpaque(true);
        CP5.add(lblG5, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 30, 40));

        jPanel4.add(CP5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 240, 40));

        CP9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtS9.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtS9.setForeground(new java.awt.Color(153, 153, 153));
        txtS9.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtS9.setText("0");
        txtS9.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtS9FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtS9FocusLost(evt);
            }
        });
        txtS9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtS9MouseClicked(evt);
            }
        });
        CP9.add(txtS9, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 50, 40));

        txtU7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtU7.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtU7.setText("0");
        txtU7.setEnabled(false);
        CP9.add(txtU7, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, 60, 40));

        CC9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CC9.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --" }));
        CC9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CC9ActionPerformed(evt);
            }
        });
        CP9.add(CC9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        lblG9.setBackground(new java.awt.Color(255, 255, 255));
        lblG9.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblG9.setForeground(new java.awt.Color(51, 51, 51));
        lblG9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblG9.setOpaque(true);
        CP9.add(lblG9, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 30, 40));

        jPanel4.add(CP9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 240, 40));

        CP7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtS4.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtS4.setForeground(new java.awt.Color(153, 153, 153));
        txtS4.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtS4.setText("0");
        txtS4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtS4FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtS4FocusLost(evt);
            }
        });
        txtS4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtS4MouseClicked(evt);
            }
        });
        CP7.add(txtS4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 60, 40));

        txtU6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtU6.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtU6.setText("0");
        txtU6.setEnabled(false);
        CP7.add(txtU6, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 50, 40));

        CC7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CC7.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --" }));
        CC7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CC7ActionPerformed(evt);
            }
        });
        CP7.add(CC7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        lblG7.setBackground(new java.awt.Color(255, 255, 255));
        lblG7.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblG7.setForeground(new java.awt.Color(51, 51, 51));
        lblG7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblG7.setOpaque(true);
        CP7.add(lblG7, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 30, 40));

        jPanel4.add(CP7, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 70, 240, 40));

        CP10.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtS7.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtS7.setForeground(new java.awt.Color(153, 153, 153));
        txtS7.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtS7.setText("0");
        txtS7.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtS7FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtS7FocusLost(evt);
            }
        });
        txtS7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtS7MouseClicked(evt);
            }
        });
        CP10.add(txtS7, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 50, 40));

        txtU8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtU8.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtU8.setText("0");
        txtU8.setEnabled(false);
        CP10.add(txtU8, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, 60, 40));

        CC10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CC10.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --" }));
        CC10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CC10ActionPerformed(evt);
            }
        });
        CP10.add(CC10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        lblG10.setBackground(new java.awt.Color(255, 255, 255));
        lblG10.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblG10.setForeground(new java.awt.Color(51, 51, 51));
        lblG10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblG10.setOpaque(true);
        CP10.add(lblG10, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 30, 40));

        jPanel4.add(CP10, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 130, 240, 40));

        CP11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtS10.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtS10.setForeground(new java.awt.Color(153, 153, 153));
        txtS10.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtS10.setText("0");
        txtS10.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtS10FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtS10FocusLost(evt);
            }
        });
        txtS10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtS10MouseClicked(evt);
            }
        });
        CP11.add(txtS10, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 60, 40));

        txtU9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtU9.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtU9.setText("0");
        txtU9.setEnabled(false);
        CP11.add(txtU9, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 50, 40));

        CC11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CC11.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --" }));
        CC11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CC11ActionPerformed(evt);
            }
        });
        CP11.add(CC11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        sbyDepart14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sbyDepart14.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --", "FIRST", "SECOND" }));
        sbyDepart14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sbyDepart14ActionPerformed(evt);
            }
        });
        CP11.add(sbyDepart14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        sbyDepart18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sbyDepart18.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --", "FIRST", "SECOND" }));
        sbyDepart18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sbyDepart18ActionPerformed(evt);
            }
        });
        CP11.add(sbyDepart18, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        lblG11.setBackground(new java.awt.Color(255, 255, 255));
        lblG11.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblG11.setForeground(new java.awt.Color(51, 51, 51));
        lblG11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblG11.setOpaque(true);
        CP11.add(lblG11, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 30, 40));

        jPanel4.add(CP11, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 130, 240, 40));

        CP8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtS8.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtS8.setForeground(new java.awt.Color(153, 153, 153));
        txtS8.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtS8.setText("0");
        txtS8.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtS8FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtS8FocusLost(evt);
            }
        });
        txtS8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtS8MouseClicked(evt);
            }
        });
        CP8.add(txtS8, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 60, 40));

        txtU11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtU11.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtU11.setText("0");
        txtU11.setEnabled(false);
        CP8.add(txtU11, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 50, 40));

        CC8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CC8.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --" }));
        CC8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CC8ActionPerformed(evt);
            }
        });
        CP8.add(CC8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        sbyDepart11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sbyDepart11.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --", "FIRST", "SECOND" }));
        sbyDepart11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sbyDepart11ActionPerformed(evt);
            }
        });
        CP8.add(sbyDepart11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        sbyDepart12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sbyDepart12.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --", "FIRST", "SECOND" }));
        sbyDepart12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sbyDepart12ActionPerformed(evt);
            }
        });
        CP8.add(sbyDepart12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        lblG8.setBackground(new java.awt.Color(255, 255, 255));
        lblG8.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblG8.setForeground(new java.awt.Color(51, 51, 51));
        lblG8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblG8.setOpaque(true);
        CP8.add(lblG8, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 30, 40));

        jPanel4.add(CP8, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 70, 240, 40));

        CP4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtS11.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtS11.setForeground(new java.awt.Color(153, 153, 153));
        txtS11.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtS11.setText("0");
        txtS11.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtS11FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtS11FocusLost(evt);
            }
        });
        txtS11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtS11MouseClicked(evt);
            }
        });
        CP4.add(txtS11, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 60, 40));

        txtU10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtU10.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtU10.setText("0");
        txtU10.setEnabled(false);
        CP4.add(txtU10, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 50, 40));

        CC4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CC4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --" }));
        CC4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CC4ActionPerformed(evt);
            }
        });
        CP4.add(CC4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        lblG4.setBackground(new java.awt.Color(255, 255, 255));
        lblG4.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblG4.setForeground(new java.awt.Color(51, 51, 51));
        lblG4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblG4.setOpaque(true);
        CP4.add(lblG4, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 30, 40));

        jPanel4.add(CP4, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 10, 240, 40));

        CP12.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtS16.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtS16.setForeground(new java.awt.Color(153, 153, 153));
        txtS16.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtS16.setText("0");
        txtS16.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtS16FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtS16FocusLost(evt);
            }
        });
        txtS16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtS16MouseClicked(evt);
            }
        });
        CP12.add(txtS16, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 60, 40));

        lblG12.setBackground(new java.awt.Color(255, 255, 255));
        lblG12.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblG12.setForeground(new java.awt.Color(51, 51, 51));
        lblG12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblG12.setOpaque(true);
        CP12.add(lblG12, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 30, 40));

        txtU12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtU12.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtU12.setText("0");
        txtU12.setEnabled(false);
        CP12.add(txtU12, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 50, 40));

        CC12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CC12.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --" }));
        CC12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CC12ActionPerformed(evt);
            }
        });
        CP12.add(CC12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        jPanel4.add(CP12, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 130, 240, 40));

        CP14.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtS14.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtS14.setForeground(new java.awt.Color(153, 153, 153));
        txtS14.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtS14.setText("0");
        txtS14.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtS14FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtS14FocusLost(evt);
            }
        });
        txtS14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtS14MouseClicked(evt);
            }
        });
        CP14.add(txtS14, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 50, 40));

        txtU14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtU14.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtU14.setText("0");
        txtU14.setEnabled(false);
        CP14.add(txtU14, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, 60, 40));

        lblG14.setBackground(new java.awt.Color(255, 255, 255));
        lblG14.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblG14.setForeground(new java.awt.Color(51, 51, 51));
        lblG14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblG14.setOpaque(true);
        CP14.add(lblG14, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 30, 40));

        CC14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CC14.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --" }));
        CC14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CC14ActionPerformed(evt);
            }
        });
        CP14.add(CC14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        jPanel4.add(CP14, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 190, 240, 40));

        CP13.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtS13.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtS13.setForeground(new java.awt.Color(153, 153, 153));
        txtS13.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtS13.setText("0");
        txtS13.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtS13FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtS13FocusLost(evt);
            }
        });
        txtS13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtS13MouseClicked(evt);
            }
        });
        CP13.add(txtS13, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 50, 40));

        txtU13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtU13.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtU13.setText("0");
        txtU13.setEnabled(false);
        CP13.add(txtU13, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, 60, 40));

        lblG13.setBackground(new java.awt.Color(255, 255, 255));
        lblG13.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblG13.setForeground(new java.awt.Color(51, 51, 51));
        lblG13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblG13.setOpaque(true);
        CP13.add(lblG13, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 30, 40));

        CC13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CC13.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --" }));
        CC13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CC13ActionPerformed(evt);
            }
        });
        CP13.add(CC13, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        jPanel4.add(CP13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 240, 40));

        CP15.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtS15.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtS15.setForeground(new java.awt.Color(153, 153, 153));
        txtS15.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtS15.setText("0");
        txtS15.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtS15FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtS15FocusLost(evt);
            }
        });
        txtS15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtS15MouseClicked(evt);
            }
        });
        CP15.add(txtS15, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 60, 40));

        lblG15.setBackground(new java.awt.Color(255, 255, 255));
        lblG15.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblG15.setForeground(new java.awt.Color(51, 51, 51));
        lblG15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblG15.setOpaque(true);
        CP15.add(lblG15, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 30, 40));

        txtU15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtU15.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtU15.setText("0");
        txtU15.setEnabled(false);
        CP15.add(txtU15, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 50, 40));

        CC15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CC15.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --" }));
        CC15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CC15ActionPerformed(evt);
            }
        });
        CP15.add(CC15, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        jPanel4.add(CP15, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 190, 240, 40));

        CP16.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtS12.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtS12.setForeground(new java.awt.Color(153, 153, 153));
        txtS12.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtS12.setText("0");
        txtS12.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtS12FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtS12FocusLost(evt);
            }
        });
        txtS12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtS12MouseClicked(evt);
            }
        });
        CP16.add(txtS12, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 60, 40));

        lblG16.setBackground(new java.awt.Color(255, 255, 255));
        lblG16.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblG16.setForeground(new java.awt.Color(51, 51, 51));
        lblG16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblG16.setOpaque(true);
        CP16.add(lblG16, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 30, 40));

        txtU16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtU16.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtU16.setText("0");
        txtU16.setEnabled(false);
        CP16.add(txtU16, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 50, 40));

        CC16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CC16.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --" }));
        CC16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CC16ActionPerformed(evt);
            }
        });
        CP16.add(CC16, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 40));

        jPanel4.add(CP16, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 190, 240, 40));

        lblTUNIT.setFont(new java.awt.Font("Perpetua", 1, 18)); // NOI18N
        lblTUNIT.setForeground(new java.awt.Color(255, 255, 255));
        lblTUNIT.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTUNIT.setText("TNUR :");
        jPanel4.add(lblTUNIT, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 280, 100, 30));

        lblTUP.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblTUP.setForeground(new java.awt.Color(153, 204, 0));
        lblTUP.setText("0");
        jPanel4.add(lblTUP, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 240, 60, 30));

        lblTNUP.setFont(new java.awt.Font("Perpetua", 1, 18)); // NOI18N
        lblTNUP.setForeground(new java.awt.Color(255, 255, 255));
        lblTNUP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTNUP.setText("TNUP :");
        jPanel4.add(lblTNUP, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 240, 80, 30));

        lblTCP.setFont(new java.awt.Font("Perpetua", 1, 18)); // NOI18N
        lblTCP.setForeground(new java.awt.Color(255, 255, 255));
        lblTCP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTCP.setText("TCP :");
        jPanel4.add(lblTCP, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 280, 70, 30));

        lblTUCP.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblTUCP.setForeground(new java.awt.Color(153, 204, 0));
        lblTUCP.setText("0");
        jPanel4.add(lblTUCP, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 280, 60, 30));

        btnSave.setBackground(new java.awt.Color(0, 153, 204));
        btnSave.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("SAVE");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jPanel4.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 240, 120, 40));

        lblTCP1.setFont(new java.awt.Font("Perpetua", 1, 18)); // NOI18N
        lblTCP1.setForeground(new java.awt.Color(255, 255, 255));
        lblTCP1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTCP1.setText("REMARKS :");
        jPanel4.add(lblTCP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 280, 100, 30));

        lblRM.setFont(new java.awt.Font("Perpetua", 1, 14)); // NOI18N
        lblRM.setForeground(new java.awt.Color(153, 204, 0));
        jPanel4.add(lblRM, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 280, 240, 30));

        lblCGPA.setFont(new java.awt.Font("Perpetua", 1, 24)); // NOI18N
        lblCGPA.setForeground(new java.awt.Color(153, 204, 0));
        lblCGPA.setText("0");
        jPanel4.add(lblCGPA, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 240, 80, 30));

        lblCGP.setFont(new java.awt.Font("Perpetua", 1, 18)); // NOI18N
        lblCGP.setForeground(new java.awt.Color(255, 255, 255));
        lblCGP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCGP.setText("CGPA :");
        jPanel4.add(lblCGP, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 240, 60, 30));

        lblRM1.setFont(new java.awt.Font("Perpetua", 1, 14)); // NOI18N
        lblRM1.setForeground(new java.awt.Color(153, 204, 0));
        jPanel4.add(lblRM1, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 280, 60, 30));

        gnt_panel.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 1040, 320));

        txtName.setEditable(false);
        txtName.setBackground(new java.awt.Color(255, 255, 255));
        txtName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtName.setBorder(null);
        gnt_panel.add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, 290, 30));

        jLabel9.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        jLabel9.setText("Fullname :");
        gnt_panel.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 80, 30));

        jPanel2.setBackground(new java.awt.Color(0, 102, 153));
        jPanel2.setForeground(new java.awt.Color(0, 102, 153));

        jLabel8.setFont(new java.awt.Font("Perpetua", 0, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Input Course Codes And Scores Here");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        gnt_panel.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 360, 40));

        txtFaculty.setEditable(false);
        txtFaculty.setBackground(new java.awt.Color(255, 255, 255));
        txtFaculty.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtFaculty.setBorder(null);
        txtFaculty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFacultyActionPerformed(evt);
            }
        });
        gnt_panel.add(txtFaculty, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, 290, 30));

        txtDepart.setEditable(false);
        txtDepart.setBackground(new java.awt.Color(255, 255, 255));
        txtDepart.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtDepart.setBorder(null);
        gnt_panel.add(txtDepart, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 140, 280, 30));

        txtProg.setEditable(false);
        txtProg.setBackground(new java.awt.Color(255, 255, 255));
        txtProg.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtProg.setBorder(null);
        gnt_panel.add(txtProg, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 190, 280, 30));

        drpNOC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        drpNOC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16" }));
        drpNOC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drpNOCActionPerformed(evt);
            }
        });
        gnt_panel.add(drpNOC, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 250, 150, 30));

        jLabel26.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        jLabel26.setText("Programme :");
        gnt_panel.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 100, 30));

        jLabel28.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        jLabel28.setText("Semester :");
        gnt_panel.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 140, 80, 30));

        drpSem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        drpSem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --", "FIRST", "SECOND" }));
        drpSem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drpSemActionPerformed(evt);
            }
        });
        gnt_panel.add(drpSem, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 140, 130, 30));

        drpLevel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        drpLevel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- select --", "100", "200", "300", "400", "500" }));
        drpLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drpLevelActionPerformed(evt);
            }
        });
        gnt_panel.add(drpLevel, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 90, 130, 30));

        jLabel29.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        jLabel29.setText("Level :");
        gnt_panel.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 90, 70, 30));

        jPanel1.add(gnt_panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 90, 1070, 620));

        F_user3.setFont(new java.awt.Font("Lucida Handwriting", 0, 18)); // NOI18N
        F_user3.setForeground(new java.awt.Color(249, 247, 247));
        F_user3.setText("Welcome! ");
        jPanel1.add(F_user3, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 10, 120, 41));

        jButton12.setBackground(new java.awt.Color(241, 247, 247));
        jButton12.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton12.setForeground(new java.awt.Color(51, 51, 51));
        jButton12.setText("1ST SEMESTER RESULTS");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton12, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 400, 210, 40));

        jButton11.setBackground(new java.awt.Color(241, 247, 247));
        jButton11.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton11.setForeground(new java.awt.Color(51, 51, 51));
        jButton11.setText("2ND SEMESTER RESULTS");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 480, 210, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked
        // TODO add your handling code here:
        int DialogButton = JOptionPane.showConfirmDialog(null, "Are you sure you want to logout?", "Warning", JOptionPane.YES_NO_OPTION);

        if(DialogButton == JOptionPane.YES_OPTION){

            Login info = new Login();
            info.setVisible(true);
            this.dispose();

        }else{

        }
    }//GEN-LAST:event_jLabel14MouseClicked

    private void btnStdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStdActionPerformed
        // TODO add your handling code here:
        EmpMGT rs = new EmpMGT();
        rs.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnStdActionPerformed

    private void btnStdsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStdsActionPerformed
        // TODO add your handling code here:
        MainForm rs = new MainForm();
        rs.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnStdsActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        Result1 rs = new Result1();
        rs.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void txtYear1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtYear1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtYear1ActionPerformed

    private void txtS1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS1FocusGained
        // TODO add your handling code here:
        if( txtS1.getText().equals("0")){
            txtS1.setText("");
            txtS1.setForeground(Color.BLACK);
            txtS1.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS1FocusGained

    private void txtS1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS1FocusLost
        // TODO add your handling code here:
        if( txtS1.getText().equals("")){
            txtS1.setText("0");
            txtS1.setForeground(Color.GRAY);
            txtS1.setFont(new Font("TimesRoman", Font.ITALIC, 14));
        }
    }//GEN-LAST:event_txtS1FocusLost

    private void txtS1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtS1MouseClicked
        // TODO add your handling code here:
        if( txtS1.getText().equals("0")){
            txtS1.setText("");
            txtS1.setForeground(Color.BLACK);
            txtS1.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS1MouseClicked

    private void txtS1InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtS1InputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_txtS1InputMethodTextChanged

    private void txtU1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtU1MouseClicked
        // TODO add your handling code here:
        if( txtU1.getText().equals("0")){
            txtU1.setText("");
            txtU1.setForeground(Color.BLACK);
            txtU1.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtU1MouseClicked

    private void CC1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CC1ActionPerformed
        // TODO add your handling code here:
        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
            Connection connect = DriverManager.getConnection(url);
            Statement st = connect.createStatement();
            ResultSet rs = st.executeQuery("select * from Course_vw_Table");

            //CC1.removeAllItems();
            //CC1.addItem("-- select --");
            while(rs.next()){

                if(CC1.getSelectedItem().equals(rs.getString("Course_Code"))){

                    txtU1.setText(rs.getString("Course_Unit"));
                }

            }
            connect.close();

        }catch(Exception Error){

            JOptionPane.showMessageDialog(null, Error);
        }
    }//GEN-LAST:event_CC1ActionPerformed

    private void btnComptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComptActionPerformed
        // TODO add your handling code here:
        //int C2 = 78;

            btnSave.setVisible(true);
        int put1 = Integer.parseInt(txtS1.getText());

        int put2 = Integer.parseInt(txtS2.getText());
        int put3 = Integer.parseInt(txtS3.getText());
        int put4 = Integer.parseInt(txtS11.getText());
        int put5 = Integer.parseInt(txtS5.getText());
        int put6 = Integer.parseInt(txtS6.getText());
        int put7 = Integer.parseInt(txtS4.getText());
        int put8 = Integer.parseInt(txtS8.getText());
        int put9 = Integer.parseInt(txtS9.getText());
        int put10 = Integer.parseInt(txtS7.getText());
        int put11 = Integer.parseInt(txtS10.getText());
        int put12 = Integer.parseInt(txtS16.getText());
        int put13 = Integer.parseInt(txtS13.getText());
        int put14 = Integer.parseInt(txtS14.getText());
        int put15 = Integer.parseInt(txtS15.getText());
        int put16 = Integer.parseInt(txtS12.getText());

        int Unit1 = Integer.parseInt(txtU1.getText());
        int Unit2 = Integer.parseInt(txtU2.getText());
        int Unit3 = Integer.parseInt(txtU3.getText());
        int Unit4 = Integer.parseInt(txtU10.getText());
        int Unit5 = Integer.parseInt(txtU4.getText());
        int Unit6 = Integer.parseInt(txtU5.getText());
        int Unit7 = Integer.parseInt(txtU6.getText());
        int Unit8 = Integer.parseInt(txtU11.getText());
        int Unit9 = Integer.parseInt(txtU7.getText());
        int Unit10 = Integer.parseInt(txtU8.getText());
        int Unit11 = Integer.parseInt(txtU9.getText());
        int Unit12 = Integer.parseInt(txtU12.getText());
        int Unit13 = Integer.parseInt(txtU13.getText());
        int Unit14 = Integer.parseInt(txtU14.getText());
        int Unit15 = Integer.parseInt(txtU15.getText());
        int Unit16 = Integer.parseInt(txtU16.getText());
        double TS_2, TS2_1;
        double P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, TS_1, TS_3;
       
        //for 1
        if((put1 >=70) && (put1 <=100)){
            lblG1.setText("A");
            P1 = 5.0;

        }else if((put1>=60) && (put1 <=69)){
            lblG1.setText("B");
            P1 = 4.0;

        }else if((put1>=50) && (put1 <=59)){
            lblG1.setText("C");
            P1 = 3.0;

        }else if((put1>=45) && (put1 <=49)){
            lblG1.setText("D");
            P1 = 2.0;

        }else{
            lblG1.setText("F");
            P1 = 0.0;
        }

        //for 2
        if((put2 >=70) && (put2 <=100)){
            lblG2.setText("A");
            P2 = 5.0;

        }else if((put2>=60) && (put2 <=69)){
            lblG2.setText("B");
            P2 = 4.0;

        }else if((put2>=50) && (put2 <=59)){
            lblG2.setText("C");
            P2 = 3.0;

        }else if((put2>=45) && (put2 <=49)){
            lblG2.setText("D");
            P2 = 2.0;

        }else{
            lblG2.setText("F");
            P2 = 0.0;

        }

        //for 3
        if((put3 >=70) && (put3 <=100)){
            lblG3.setText("A");
            P3 = 5.0;

        }else if((put3>=60) && (put3 <=69)){
            lblG3.setText("B");
            P3 = 4.0;

        }else if((put3>=50) && (put3 <=59)){
            lblG3.setText("C");
            P3 = 3.0;

        }else if((put3>=45) && (put3 <=49)){
            lblG3.setText("D");
            P3 = 2.0;

        }else{
            lblG3.setText("F");
            P3 = 0.0;

        }

        //for 4
        if((put4 >=70) && (put4 <=100)){
            lblG4.setText("A");
            P4 = 5.0;

        }else if((put4>=60) && (put4 <=69)){
            lblG4.setText("B");
            P4 = 4.0;

        }else if((put4>=50) && (put4 <=59)){
            lblG4.setText("C");
            P4 = 3.0;

        }else if((put4>=45) && (put4 <=49)){
            lblG4.setText("D");
            P4 = 2.0;

        }else{
            lblG4.setText("F");
            P4 = 0.0;

        }

        //for 5
        if((put5 >=70) && (put5 <=100)){
            lblG5.setText("A");
            P5 = 5.0;

        }else if((put5>=60) && (put5 <=69)){
            lblG5.setText("B");
            P5 = 4.0;

        }else if((put5>=50) && (put5 <=59)){
            lblG5.setText("C");
            P5 = 3.0;

        }else if((put5 >=45) && (put5 <=49)){
            lblG5.setText("D");
            P5 = 2.0;

        }else{
            lblG5.setText("F");
            P5 = 0.0;

        }

        //for 6
        if((put6 >=70) && (put6 <=100)){
            lblG6.setText("A");
            P6 = 5.0;

        }else if((put6 >=60) && (put6 <=69)){
            lblG6.setText("B");
            P6 = 4.0;

        }else if((put6 >=50) && (put6 <=59)){
            lblG6.setText("C");
            P6 = 3.0;

        }else if((put6>=45) && (put6 <=49)){
            lblG6.setText("D");
            P6 = 2.0;

        }else{
            lblG6.setText("F");
            P6 = 0.0;

        }

        //for 7
        if((put7 >=70) && (put7 <=100)){
            lblG7.setText("A");
            P7 = 5.0;

        }else if((put7 >=60) && (put7 <=69)){
            lblG7.setText("B");
            P7 = 4.0;

        }else if((put7 >=50) && (put7 <=59)){
            lblG7.setText("C");
            P7 = 3.0;

        }else if((put7 >=45) && (put7 <=49)){
            lblG7.setText("D");
            P7 = 2.0;

        }else{
            lblG7.setText("F");
            P7 = 0.0;

        }

        //for 8
        if((put8 >=70) && (put8 <=100)){
            lblG8.setText("A");
            P8 = 5.0;

        }else if((put8 >=60) && (put8 <=69)){
            lblG8.setText("B");
            P8 = 4.0;

        }else if((put8 >=50) && (put8 <=59)){
            lblG8.setText("C");
            P8 = 3.0;

        }else if((put8 >=45) && (put8 <=49)){
            lblG8.setText("D");
            P8 = 2.0;

        }else{
            lblG8.setText("F");
            P8 = 0.0;

        }

        //for 9
        if((put9 >=70) && (put9 <=100)){
            lblG9.setText("A");
            P9 = 5.0;

        }else if((put9 >=60) && (put9 <=69)){
            lblG9.setText("B");
            P9 = 4.0;

        }else if((put9 >=50) && (put9 <=59)){
            lblG9.setText("C");
            P9 = 3.0;

        }else if((put9 >=45) && (put9 <=49)){
            lblG9.setText("D");
            P9 = 2.0;

        }else{
            lblG9.setText("F");
            P9 = 0.0;

        }

        //for 10
        if((put10 >=70) && (put10 <=100)){
            lblG10.setText("A");
            P10 = 5.0;

        }else if((put10 >=60) && (put10 <=69)){
            lblG10.setText("B");
            P10 = 4.0;

        }else if((put10 >=50) && (put10 <=59)){
            lblG10.setText("C");
            P10 = 3.0;

        }else if((put10 >=45) && (put10 <=49)){
            lblG10.setText("D");
            P10 = 2.0;

        }else{
            lblG10.setText("F");
            P10 = 0.0;

        }

        //for 11
        if((put11 >=70) && (put11 <=100)){
            lblG11.setText("A");
            P11 = 5.0;

        }else if((put11 >=60) && (put11 <=69)){
            lblG11.setText("B");
            P11 = 4.0;

        }else if((put11 >=50) && (put11 <=59)){
            lblG11.setText("C");
            P11 = 3.0;

        }else if((put11 >=45) && (put11 <=49)){
            lblG11.setText("D");
            P11 = 2.0;

        }else{
            lblG11.setText("F");
            P11 = 0.0;

        }

        //for 12
        if((put12 >=70) && (put12 <=100)){
            lblG12.setText("A");
            P12 = 5.0;

        }else if((put12 >=60) && (put12 <=69)){
            lblG12.setText("B");
            P12 = 4.0;

        }else if((put12 >=50) && (put12 <=59)){
            lblG12.setText("C");
            P12 = 3.0;

        }else if((put12 >=45) && (put12 <=49)){
            lblG12.setText("D");
            P12 = 2.0;

        }else{
            lblG12.setText("F");
            P12 = 0.0;

        }
        //for 13
        if((put13 >=70) && (put13 <=100)){
            lblG13.setText("A");
            P13 = 5.0;

        }else if((put13 >=60) && (put13 <=69)){
            lblG13.setText("B");
            P13 = 4.0;

        }else if((put13 >=50) && (put13 <=59)){
            lblG13.setText("C");
            P13 = 3.0;

        }else if((put13 >=45) && (put13 <=49)){
            lblG13.setText("D");
            P13 = 2.0;

        }else{
            lblG13.setText("F");
            P13 = 0.0;

        }

        //for 14
        if((put14 >=70) && (put14 <=100)){
            lblG14.setText("A");
            P14 = 5.0;

        }else if((put14 >=60) && (put14 <=69)){
            lblG14.setText("B");
            P14 = 4.0;

        }else if((put14 >=50) && (put14 <=59)){
            lblG14.setText("C");
            P14 = 3.0;

        }else if((put14 >=45) && (put14 <=49)){
            lblG14.setText("D");
            P14 = 2.0;

        }else{
            lblG14.setText("F");
            P14 = 0.0;

        }

        //for 15
        if((put15 >=70) && (put15 <=100)){
            lblG15.setText("A");
            P15 = 5.0;

        }else if((put15 >=60) && (put15 <=69)){
            lblG15.setText("B");
            P15 = 4.0;

        }else if((put15 >=50) && (put15 <=59)){
            lblG15.setText("C");
            P15 = 3.0;

        }else if((put15 >=45) && (put15 <=49)){
            lblG15.setText("D");
            P15 = 2.0;

        }else{
            lblG15.setText("F");
            P15 = 0.0;

        }

        //for 16
        if((put16 >=70) && (put16 <=100)){
            lblG16.setText("A");
            P16 = 5.0;

        }else if((put16 >=60) && (put16 <=69)){
            lblG16.setText("B");
            P16 = 4.0;

        }else if((put16 >=50) && (put16 <=59)){
            lblG16.setText("C");
            P16 = 3.0;

        }else if((put16 >=45) && (put16 <=49)){
            lblG16.setText("D");
            P16 = 2.0;

        }else{
            lblG16.setText("F");
            P16 = 0.0;

        }
    if(drpLevel.getSelectedItem().equals("-- select --")){
                JOptionPane.showMessageDialog(this,"Level is requied");

    }else if(drpSem.getSelectedItem().equals("-- select --")){
                JOptionPane.showMessageDialog(this,"Semester is requied");
    }else{
        if(drpNOC.getSelectedItem().equals("1") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
            
            lblCGP.setVisible(false);
            lblCGPA.setVisible(false);
            int TU = Unit1;
            TS_1 = ((P1 * Unit1)/TU);
            
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            TS_2 = P1*Unit1;
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            lblTUCP.setText(TCP);

            TSU = Integer.toString(TU);
            lblTU.setText(TSU);
            
            String f1="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(Unit1 == 0){
            lblRM1.setText("FAILED : ");
            lblRM.setText(f1);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            int TUP = Unit1;
            TSU = Integer.toString(TUP);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);

        }else if(drpNOC.getSelectedItem().equals("1") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select TCP, TNUR, TNUP, GPA from SRT_DP1_vw_Table where Matric_No = '"+ txtMatricNo1.getText() +"' ");

                while(rs.next()){

                    cp1 = Integer.parseInt(rs.getString("TCP"));
                    cp2 = Integer.parseInt(rs.getString("TNUR"));
                    cp3 = Integer.parseInt(rs.getString("TNUP"));
                    cp4 = Double.parseDouble(rs.getString("GPA"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
            
            //Total Units
            int TU = Unit1;
            int TU2 = TU + cp2;
            
            //Total GPA
            TS_1 = ((P1 * Unit1)/TU);
            
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            
            //Total Credit Point
            TS_2 = P1*Unit1;
            TS_3 = TS_2 + cp1;
            
            TS2_1 = ((TS_3)/TU2);
            BigDecimal cgp = new BigDecimal(Double.toString(TS2_1));
            cgp = cgp.setScale(2, RoundingMode.HALF_UP);
            double TSS2 = cgp.doubleValue();
            TSS22 = Double.toString(TSS2);
            
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            int tc2 = (int) TS_3;
            TCP2 = Integer.toString(tc2);
            lblTUCP.setText(TCP);

            TSU = Integer.toString(TU);
            TSU2 = Integer.toString(TU2);
            lblTU.setText(TSU);
            
            String f1="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(Unit1 == 0){
            lblRM1.setText("FAILED : ");
            lblRM.setText(f1);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            int TUP = Unit1;
            int TUP2 = TUP + cp3;
            TSU = Integer.toString(TUP);
            TNUP2 = Integer.toString(TUP2);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);
            lblCGPA.setText(TSS22);
            
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)

        }
    
        if(drpNOC.getSelectedItem().equals("2") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
            
            lblCGP.setVisible(false);
            lblCGPA.setVisible(false);
          
            int TU = Unit1 + Unit2;
            TS_1 = ((P1 * Unit1) + (P2 * Unit2))/TU;
            
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            TS_2 = (P1 * Unit1) + (P2 * Unit2);
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            lblTUCP.setText(TCP);
            

            TSU = Integer.toString(TU);
            lblTU.setText(TSU);
            
            String f1="", f2="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0){
            lblRM1.setText("FAILED : ");
                lblRM.setText(f1 + " " + f2);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            int TUP = Unit1 + Unit2;
            TSU = Integer.toString(TUP);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);


        }else if(drpNOC.getSelectedItem().equals("2") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select TCP, TNUR, TNUP, GPA from SRT_DP1_vw_Table where Matric_No = '"+ txtMatricNo1.getText() +"' ");

                while(rs.next()){

                    cp1 = Integer.parseInt(rs.getString("TCP"));
                    cp2 = Integer.parseInt(rs.getString("TNUR"));
                    cp3 = Integer.parseInt(rs.getString("TNUP"));
                    cp4 = Double.parseDouble(rs.getString("GPA"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
            
            //Total Units          
            int TU = Unit1 + Unit2;
            int TU2 = TU + cp2;
            
            //Total GPA
            TS_1 = ((P1 * Unit1) + (P2 * Unit2))/TU;
            
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            
            //Total Credit Point
            TS_2 = (P1 * Unit1) + (P2 * Unit2);
            TS_3 = TS_2 + cp1;
            
            TS2_1 = ((TS_3)/TU2);
            BigDecimal cgp = new BigDecimal(Double.toString(TS2_1));
            cgp = cgp.setScale(2, RoundingMode.HALF_UP);
            double TSS2 = cgp.doubleValue();
            TSS22 = Double.toString(TSS2);
            
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            int tc2 = (int) TS_3;
            TCP2 = Integer.toString(tc2);
            lblTUCP.setText(TCP);

            TSU = Integer.toString(TU);
            TSU2 = Integer.toString(TU2);
            lblTU.setText(TSU);
                        
            String f1="", f2="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0){
            lblRM1.setText("FAILED : ");
                lblRM.setText(f1 + " " + f2);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            int TUP = Unit1 + Unit2;
            int TUP2 = TUP + cp3;
            TSU = Integer.toString(TUP);
            TNUP2 = Integer.toString(TUP2);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);
            lblCGPA.setText(TSS22);
            
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)

    }

        if(drpNOC.getSelectedItem().equals("3") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
            
          
            lblCGP.setVisible(false);
            lblCGPA.setVisible(false);
            int TU = Unit1 + Unit2 + Unit3;
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3))/TU;
            
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            TSU = Integer.toString(TU);
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3);
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            lblTUCP.setText(TCP);

            lblTU.setText(TSU);
            
            String f1="", f2="", f3="";
            
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0){
            lblRM1.setText("FAILED : ");
                lblRM.setText(f1 + " " + f2 + " " + f3);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            int TUP = Unit1 + Unit2 + Unit3;
            TSU = Integer.toString(TUP);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);
            
        }else if(drpNOC.getSelectedItem().equals("3") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select TCP, TNUR, TNUP, GPA from SRT_DP1_vw_Table where Matric_No = '"+ txtMatricNo1.getText() +"' ");

                while(rs.next()){

                    cp1 = Integer.parseInt(rs.getString("TCP"));
                    cp2 = Integer.parseInt(rs.getString("TNUR"));
                    cp3 = Integer.parseInt(rs.getString("TNUP"));
                    cp4 = Double.parseDouble(rs.getString("GPA"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
            
            //Total Units          
            int TU = Unit1 + Unit2 + Unit3;
            int TU2 = TU + cp2;
            
            //Total GPA
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3))/TU;
            
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            
            //Total Credit Point
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3);
            TS_3 = TS_2 + cp1;
            
            TS2_1 = ((TS_3)/TU2);
            BigDecimal cgp = new BigDecimal(Double.toString(TS2_1));
            cgp = cgp.setScale(2, RoundingMode.HALF_UP);
            double TSS2 = cgp.doubleValue();
            TSS22 = Double.toString(TSS2);
            
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            int tc2 = (int) TS_3;
            TCP2 = Integer.toString(tc2);
            lblTUCP.setText(TCP);

            TSU = Integer.toString(TU);
            TSU2 = Integer.toString(TU2);
            lblTU.setText(TSU);
            //double CGPA = TS_3/TU2;
            lblRM.setText("PASSED");
            String f1="", f2="", f3="";
            
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0){
            lblRM1.setText("FAILED : ");
                lblRM.setText(f1 + " " + f2 + " " + f3);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            int TUP = Unit1 + Unit2 + Unit3;
            int TUP2 = TUP + cp3;
            TSU = Integer.toString(TUP);
            TNUP2 = Integer.toString(TUP2);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);
            lblCGPA.setText(TSS22);
            
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)

    }

        if(drpNOC.getSelectedItem().equals("4") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
            
          
            int TU = Unit1 + Unit2 + Unit3 + Unit4;
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4))/TU;
            
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            TSU = Integer.toString(TU);
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4);
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            lblTUCP.setText(TCP);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0){
            lblRM1.setText("FAILED : ");
                lblRM.setText(f1 + " " + f2 + " " + f3 + " " + f4);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4;
            TSU = Integer.toString(TUP);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);

            
        }else if(drpNOC.getSelectedItem().equals("4") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select TCP, TNUR, TNUP, GPA from SRT_DP1_vw_Table where Matric_No = '"+ txtMatricNo1.getText() +"' ");

                while(rs.next()){

                    cp1 = Integer.parseInt(rs.getString("TCP"));
                    cp2 = Integer.parseInt(rs.getString("TNUR"));
                    cp3 = Integer.parseInt(rs.getString("TNUP"));
                    cp4 = Double.parseDouble(rs.getString("GPA"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
            
            //Total Units          
            int TU = Unit1 + Unit2 + Unit3 + Unit4;
            int TU2 = TU + cp2;
            
            //Total GPA
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4))/TU;
            
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            //Total Credit Point
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4);
            TS_3 = TS_2 + cp1;
            
            TS2_1 = ((TS_3)/TU2);
            BigDecimal cgp = new BigDecimal(Double.toString(TS2_1));
            cgp = cgp.setScale(2, RoundingMode.HALF_UP);
            double TSS2 = cgp.doubleValue();
            TSS22 = Double.toString(TSS2);
            
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            int tc2 = (int) TS_3;
            TCP2 = Integer.toString(tc2);
            lblTUCP.setText(TCP);

            TSU = Integer.toString(TU);
            TSU2 = Integer.toString(TU2);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0){
            lblRM1.setText("FAILED : ");
                lblRM.setText(f1 + " " + f2 + " " + f3 + " " + f4);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4;
            int TUP2 = TUP + cp3;
            TSU = Integer.toString(TUP);
            TNUP2 = Integer.toString(TUP2);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);
            lblCGPA.setText(TSS22);
            
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)

    }

        if(drpNOC.getSelectedItem().equals("5") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
            
          
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5;
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5))/TU;
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            TSU = Integer.toString(TU);
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5);
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            lblTUCP.setText(TCP);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5;
            TSU = Integer.toString(TUP);
            lblTUP.setText(TSU);
            
            lblRM.setText("PASSED");
            if(TSS1 < 2.0){
                lblRM.setText("FAILED");
            }
            lblGPA.setText(TSS);

        }else if(drpNOC.getSelectedItem().equals("5") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select TCP, TNUR, TNUP, GPA from SRT_DP1_vw_Table where Matric_No = '"+ txtMatricNo1.getText() +"' ");

                while(rs.next()){

                    cp1 = Integer.parseInt(rs.getString("TCP"));
                    cp2 = Integer.parseInt(rs.getString("TNUR"));
                    cp3 = Integer.parseInt(rs.getString("TNUP"));
                    cp4 = Double.parseDouble(rs.getString("GPA"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
            
            //Total Units
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5;
            int TU2 = TU + cp2;
            
            //Total GPA
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5))/TU;
            
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            
            //Total Credit Point
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5);
            TS_3 = TS_2 + cp1;
            
            TS2_1 = ((TS_3)/TU2);
            BigDecimal cgp = new BigDecimal(Double.toString(TS2_1));
            cgp = cgp.setScale(2, RoundingMode.HALF_UP);
            double TSS2 = cgp.doubleValue();
            TSS22 = Double.toString(TSS2);
            
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            int tc2 = (int) TS_3;
            TCP2 = Integer.toString(tc2);
            lblTUCP.setText(TCP);

            TSU = Integer.toString(TU);
            TSU2 = Integer.toString(TU2);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5;
            int TUP2 = TUP + cp3;
            TSU = Integer.toString(TUP);
            TNUP2 = Integer.toString(TUP2);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);
            lblCGPA.setText(TSS22);
            
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)

    }
    if(drpNOC.getSelectedItem().equals("6") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
    
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6;
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6))/TU;
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            TSU = Integer.toString(TU);
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6);
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            lblTUCP.setText(TCP);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="", f6="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0|| Unit6 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6;
            TSU = Integer.toString(TUP);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);



        }else if(drpNOC.getSelectedItem().equals("6") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select TCP, TNUR, TNUP, GPA from SRT_DP1_vw_Table where Matric_No = '"+ txtMatricNo1.getText() +"' ");

                while(rs.next()){

                    cp1 = Integer.parseInt(rs.getString("TCP"));
                    cp2 = Integer.parseInt(rs.getString("TNUR"));
                    cp3 = Integer.parseInt(rs.getString("TNUP"));
                    cp4 = Double.parseDouble(rs.getString("GPA"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
            
            //Total Units
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6;
            int TU2 = TU + cp2;
            
            //Total GPA
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6))/TU;
            
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            
            //Total Credit Point
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6);
            TS_3 = TS_2 + cp1;
            
            TS2_1 = ((TS_3)/TU2);
            BigDecimal cgp = new BigDecimal(Double.toString(TS2_1));
            cgp = cgp.setScale(2, RoundingMode.HALF_UP);
            double TSS2 = cgp.doubleValue();
            TSS22 = Double.toString(TSS2);
            
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            int tc2 = (int) TS_3;
            TCP2 = Integer.toString(tc2);
            lblTUCP.setText(TCP);

            TSU = Integer.toString(TU);
            TSU2 = Integer.toString(TU2);
            lblTU.setText(TSU);
             
            String f1="", f2="", f3="", f4="", f5="", f6="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0|| Unit6 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6;
            int TUP2 = TUP + cp3;
            TSU = Integer.toString(TUP);
            TNUP2 = Integer.toString(TUP2);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);
            lblCGPA.setText(TSS22);
            
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)

    }
    if(drpNOC.getSelectedItem().equals("7") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
    
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7;
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7))/TU;
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            TSU = Integer.toString(TU);
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7);
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            lblTUCP.setText(TCP);
            lblTU.setText(TSU);
           
            String f1="", f2="", f3="", f4="", f5="", f6="", f7="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            if(P7 < 2.0){
                Unit7 = 0;
                f7 = CC7.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0 || Unit6 == 0 || Unit7 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7;
            TSU = Integer.toString(TUP);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);



        }else if(drpNOC.getSelectedItem().equals("7") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select TCP, TNUR, TNUP, GPA from SRT_DP1_vw_Table where Matric_No = '"+ txtMatricNo1.getText() +"' ");

                while(rs.next()){

                    cp1 = Integer.parseInt(rs.getString("TCP"));
                    cp2 = Integer.parseInt(rs.getString("TNUR"));
                    cp3 = Integer.parseInt(rs.getString("TNUP"));
                    cp4 = Double.parseDouble(rs.getString("GPA"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
            
            //Total Units
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7;
            int TU2 = TU + cp2;
            
            //Total GPA
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7))/TU;
            
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            //Total Credit Point
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7);
            TS_3 = TS_2 + cp1;
            
            TS2_1 = ((TS_3)/TU2);
            BigDecimal cgp = new BigDecimal(Double.toString(TS2_1));
            cgp = cgp.setScale(2, RoundingMode.HALF_UP);
            double TSS2 = cgp.doubleValue();
            TSS22 = Double.toString(TSS2);
            
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            int tc2 = (int) TS_3;
            TCP2 = Integer.toString(tc2);
            lblTUCP.setText(TCP);

            TSU = Integer.toString(TU);
            TSU2 = Integer.toString(TU2);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="", f6="", f7="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            if(P7 < 2.0){
                Unit7 = 0;
                f7 = CC7.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0 || Unit6 == 0 || Unit7 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7);
            }
            else{
            lblRM.setText("PASSED");
            }
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7;
            int TUP2 = TUP + cp3;
            TSU = Integer.toString(TUP);
            TNUP2 = Integer.toString(TUP2);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);
            lblCGPA.setText(TSS22);
            
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)

    }
    if(drpNOC.getSelectedItem().equals("8") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
    
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8;
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7) + (P8 * Unit8))/TU;
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            TSU = Integer.toString(TU);
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7) + (P8 * Unit8);
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            lblTUCP.setText(TCP);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="", f6="", f7="", f8="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            if(P7 < 2.0){
                Unit7 = 0;
                f7 = CC7.getSelectedItem().toString();
            }
            if(P8 < 2.0){
                Unit8 = 0;
                f8 = CC8.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0 || Unit6 == 0 || Unit7 == 0 || Unit8 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7 + " " + f8);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8;
            TSU = Integer.toString(TUP);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);

        }else if(drpNOC.getSelectedItem().equals("8") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select TCP, TNUR, TNUP, GPA from SRT_DP1_vw_Table where Matric_No = '"+ txtMatricNo1.getText() +"' ");

                while(rs.next()){

                    cp1 = Integer.parseInt(rs.getString("TCP"));
                    cp2 = Integer.parseInt(rs.getString("TNUR"));
                    cp3 = Integer.parseInt(rs.getString("TNUP"));
                    cp4 = Double.parseDouble(rs.getString("GPA"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
            
            //Total Units
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8;
            int TU2 = TU + cp2;
            
            //Total GPA
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7) + (P8 * Unit8))/TU;
            
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            //Total Credit Point
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7) + (P8 * Unit8);
            TS_3 = TS_2 + cp1;
            
            TS2_1 = ((TS_3)/TU2);
            BigDecimal cgp = new BigDecimal(Double.toString(TS2_1));
            cgp = cgp.setScale(2, RoundingMode.HALF_UP);
            double TSS2 = cgp.doubleValue();
            TSS22 = Double.toString(TSS2);
            
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            int tc2 = (int) TS_3;
            TCP2 = Integer.toString(tc2);
            lblTUCP.setText(TCP);

            TSU = Integer.toString(TU);
            TSU2 = Integer.toString(TU2);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="", f6="", f7="", f8="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            if(P7 < 2.0){
                Unit7 = 0;
                f7 = CC7.getSelectedItem().toString();
            }
            if(P8 < 2.0){
                Unit8 = 0;
                f8 = CC8.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0 || Unit6 == 0 || Unit7 == 0 || Unit8 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7 + " " + f8);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8;
            int TUP2 = TUP + cp3;
            TSU = Integer.toString(TUP);
            TNUP2 = Integer.toString(TUP2);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);
            lblCGPA.setText(TSS22);
            
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)

    }
if(drpNOC.getSelectedItem().equals("9") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
    
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9;
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7)
             + (P8 * Unit8)+ (P9 * Unit9))/TU;
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            TSU = Integer.toString(TU);
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7)
            + (P8 * Unit8)+ (P9 * Unit9);
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            lblTUCP.setText(TCP);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="", f6="", f7="", f8="", f9="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            if(P7 < 2.0){
                Unit7 = 0;
                f7 = CC7.getSelectedItem().toString();
            }
            if(P8 < 2.0){
                Unit8 = 0;
                f8 = CC8.getSelectedItem().toString();
            }
            if(P9 < 2.0){
                Unit9 = 0;
                f9 = CC9.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0 || Unit6 == 0 || Unit7 == 0 || Unit8 == 0
                    || Unit9 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7 + " " + f8
                    + " " + f9);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9;
            TSU = Integer.toString(TUP);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);

        }else if(drpNOC.getSelectedItem().equals("9") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select TCP, TNUR, TNUP, GPA from SRT_DP1_vw_Table where Matric_No = '"+ txtMatricNo1.getText() +"' ");

                while(rs.next()){

                    cp1 = Integer.parseInt(rs.getString("TCP"));
                    cp2 = Integer.parseInt(rs.getString("TNUR"));
                    cp3 = Integer.parseInt(rs.getString("TNUP"));
                    cp4 = Double.parseDouble(rs.getString("GPA"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
            
            //Total Units
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9;
            int TU2 = TU + cp2;
            
            //Total GPA
            
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) +
            (P7 * Unit7) + (P8 * Unit8) + (P9 * Unit9))/TU;
            
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            
            //Total Credit Point
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7)
             + (P8 * Unit8)+ (P9 * Unit9);
            TS_3 = TS_2 + cp1;
            
            TS2_1 = ((TS_3)/TU2);
            BigDecimal cgp = new BigDecimal(Double.toString(TS2_1));
            cgp = cgp.setScale(2, RoundingMode.HALF_UP);
            double TSS2 = cgp.doubleValue();
            TSS22 = Double.toString(TSS2);
            
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            int tc2 = (int) TS_3;
            TCP2 = Integer.toString(tc2);
            lblTUCP.setText(TCP);

            TSU = Integer.toString(TU);
            TSU2 = Integer.toString(TU2);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="", f6="", f7="", f8="", f9="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            if(P7 < 2.0){
                Unit7 = 0;
                f7 = CC7.getSelectedItem().toString();
            }
            if(P8 < 2.0){
                Unit8 = 0;
                f8 = CC8.getSelectedItem().toString();
            }
            if(P9 < 2.0){
                Unit9 = 0;
                f9 = CC9.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0 || Unit6 == 0 || Unit7 == 0 || Unit8 == 0
                    || Unit9 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7 + " " + f8
                    + " " + f9);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9;
            int TUP2 = TUP + cp3;
            TSU = Integer.toString(TUP);
            TNUP2 = Integer.toString(TUP2);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);
            lblCGPA.setText(TSS22);
            
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)

    }
    if(drpNOC.getSelectedItem().equals("10") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
    
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10;
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) +
            (P7 * Unit7) + (P8 * Unit8) + (P9 * Unit9) + (P10 * Unit10))/TU;
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            TSU = Integer.toString(TU);
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7)
            + (P8 * Unit8)+ (P9 * Unit9)+ (P10 * Unit10);
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            lblTUCP.setText(TCP);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="", f6="", f7="", f8="", f9="", f10="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            if(P7 < 2.0){
                Unit7 = 0;
                f7 = CC7.getSelectedItem().toString();
            }
            if(P8 < 2.0){
                Unit8 = 0;
                f8 = CC8.getSelectedItem().toString();
            }
            if(P9 < 2.0){
                Unit9 = 0;
                f9 = CC9.getSelectedItem().toString();
            }
            if(P10 < 2.0){
                Unit10 = 0;
                f10 = CC10.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0 || Unit6 == 0 || Unit7 == 0 || Unit8 == 0
                    || Unit9 == 0 || Unit10 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7 + " " + f8
                    + " " + f9 + " " + f10);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10;
            TSU = Integer.toString(TUP);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);

        }else if(drpNOC.getSelectedItem().equals("10") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select TCP, TNUR, TNUP, GPA from SRT_DP1_vw_Table where Matric_No = '"+ txtMatricNo1.getText() +"' ");

                while(rs.next()){

                    cp1 = Integer.parseInt(rs.getString("TCP"));
                    cp2 = Integer.parseInt(rs.getString("TNUR"));
                    cp3 = Integer.parseInt(rs.getString("TNUP"));
                    cp4 = Double.parseDouble(rs.getString("GPA"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
            
            //Total Units
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10;
            int TU2 = TU + cp2;
            
            //Total GPA
            
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) +
            (P7 * Unit7) + (P8 * Unit8) + (P9 * Unit9) + (P10 * Unit10))/TU;
            
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            //Total Credit Point
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7)
             + (P8 * Unit8)+ (P9 * Unit9)+ (P10 * Unit10);
            TS_3 = TS_2 + cp1;
            
            TS2_1 = ((TS_3)/TU2);
            BigDecimal cgp = new BigDecimal(Double.toString(TS2_1));
            cgp = cgp.setScale(2, RoundingMode.HALF_UP);
            double TSS2 = cgp.doubleValue();
            TSS22 = Double.toString(TSS2);
            
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            int tc2 = (int) TS_3;
            TCP2 = Integer.toString(tc2);
            lblTUCP.setText(TCP);

            TSU = Integer.toString(TU);
            TSU2 = Integer.toString(TU2);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="", f6="", f7="", f8="", f9="", f10="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            if(P7 < 2.0){
                Unit7 = 0;
                f7 = CC7.getSelectedItem().toString();
            }
            if(P8 < 2.0){
                Unit8 = 0;
                f8 = CC8.getSelectedItem().toString();
            }
            if(P9 < 2.0){
                Unit9 = 0;
                f9 = CC9.getSelectedItem().toString();
            }
            if(P10 < 2.0){
                Unit10 = 0;
                f10 = CC10.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0 || Unit6 == 0 || Unit7 == 0 || Unit8 == 0
                    || Unit9 == 0 || Unit10 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7 + " " + f8
                    + " " + f9 + " " + f10);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10;
            int TUP2 = TUP + cp3;
            TSU = Integer.toString(TUP);
            TNUP2 = Integer.toString(TUP2);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);
            lblCGPA.setText(TSS22);
            
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)

    }
    if(drpNOC.getSelectedItem().equals("11") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
    
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11;
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) +
            (P7 * Unit7) + (P8 * Unit8) + (P9 * Unit9) + (P10 * Unit10) + (P11 * Unit11))/TU;
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            TSU = Integer.toString(TU);
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7)
            + (P8 * Unit8)+ (P9 * Unit9)+ (P10 * Unit10)+ (P11 * Unit11);
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            lblTUCP.setText(TCP);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="", f6="", f7="", f8="", f9="", f10="", f11="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            if(P7 < 2.0){
                Unit7 = 0;
                f7 = CC7.getSelectedItem().toString();
            }
            if(P8 < 2.0){
                Unit8 = 0;
                f8 = CC8.getSelectedItem().toString();
            }
            if(P9 < 2.0){
                Unit9 = 0;
                f9 = CC9.getSelectedItem().toString();
            }
            if(P10 < 2.0){
                Unit10 = 0;
                f10 = CC10.getSelectedItem().toString();
            }
            if(P11 < 2.0){
                Unit11 = 0;
                f11 = CC11.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0 || Unit6 == 0 || Unit7 == 0 || Unit8 == 0
                    || Unit9 == 0 || Unit10 == 0 || Unit11 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7 + " " + f8
                    + " " + f9 + " " + f10 + " " + f11);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11;
            TSU = Integer.toString(TUP);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);

        }else if(drpNOC.getSelectedItem().equals("11") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select TCP, TNUR, TNUP, GPA from SRT_DP1_vw_Table where Matric_No = '"+ txtMatricNo1.getText() +"' ");

                while(rs.next()){

                    cp1 = Integer.parseInt(rs.getString("TCP"));
                    cp2 = Integer.parseInt(rs.getString("TNUR"));
                    cp3 = Integer.parseInt(rs.getString("TNUP"));
                    cp4 = Double.parseDouble(rs.getString("GPA"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
            
            //Total Units
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11;
            int TU2 = TU + cp2;
            
            //Total GPA
            
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) +
            (P7 * Unit7) + (P8 * Unit8) + (P9 * Unit9) + (P10 * Unit10) + (P11 * Unit11))/TU;
            
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            //Total Credit Point
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7)
             + (P8 * Unit8)+ (P9 * Unit9)+ (P10 * Unit10)+ (P11 * Unit11);
            TS_3 = TS_2 + cp1;
            
            TS2_1 = ((TS_3)/TU2);
            BigDecimal cgp = new BigDecimal(Double.toString(TS2_1));
            cgp = cgp.setScale(2, RoundingMode.HALF_UP);
            double TSS2 = cgp.doubleValue();
            TSS22 = Double.toString(TSS2);
            
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            int tc2 = (int) TS_3;
            TCP2 = Integer.toString(tc2);
            lblTUCP.setText(TCP);

            TSU = Integer.toString(TU);
            TSU2 = Integer.toString(TU2);
            lblTU.setText(TSU);
            
            
            String f1="", f2="", f3="", f4="", f5="", f6="", f7="", f8="", f9="", f10="", f11="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            if(P7 < 2.0){
                Unit7 = 0;
                f7 = CC7.getSelectedItem().toString();
            }
            if(P8 < 2.0){
                Unit8 = 0;
                f8 = CC8.getSelectedItem().toString();
            }
            if(P9 < 2.0){
                Unit9 = 0;
                f9 = CC9.getSelectedItem().toString();
            }
            if(P10 < 2.0){
                Unit10 = 0;
                f10 = CC10.getSelectedItem().toString();
            }
            if(P11 < 2.0){
                Unit11 = 0;
                f11 = CC11.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0 || Unit6 == 0 || Unit7 == 0 || Unit8 == 0
                    || Unit9 == 0 || Unit10 == 0 || Unit11 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7 + " " + f8
                    + " " + f9 + " " + f10 + " " + f11);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11;
            int TUP2 = TUP + cp3;
            TSU = Integer.toString(TUP);
            TNUP2 = Integer.toString(TUP2);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);
            lblCGPA.setText(TSS22);
            
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)

    }
    if(drpNOC.getSelectedItem().equals("12") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
    
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11 + Unit12;
            
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) +
            (P7 * Unit7) + (P8 * Unit8) + (P9 * Unit9) + (P10 * Unit10) + (P11 * Unit11) + (P12 * Unit12))/TU;
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            TSU = Integer.toString(TU);
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7)
            + (P8 * Unit8)+ (P9 * Unit9)+ (P10 * Unit10) + (P11 * Unit11) + (P12 * Unit12);
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            lblTUCP.setText(TCP);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="", f6="", f7="", f8="", f9="", f10="", f11="", f12="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            if(P7 < 2.0){
                Unit7 = 0;
                f7 = CC7.getSelectedItem().toString();
            }
            if(P8 < 2.0){
                Unit8 = 0;
                f8 = CC8.getSelectedItem().toString();
            }
            if(P9 < 2.0){
                Unit9 = 0;
                f9 = CC9.getSelectedItem().toString();
            }
            if(P10 < 2.0){
                Unit10 = 0;
                f10 = CC10.getSelectedItem().toString();
            }
            if(P11 < 2.0){
                Unit11 = 0;
                f11 = CC11.getSelectedItem().toString();
            }
            if(P12 < 2.0){
                Unit12 = 0;
                f12 = CC12.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0 || Unit6 == 0 || Unit7 == 0 || Unit8 == 0
                    || Unit9 == 0 || Unit10 == 0 || Unit11 == 0 || Unit12 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7 + " " + f8
                    + " " + f9 + " " + f10 + " " + f11 + " " + f12);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11 + Unit12;
            TSU = Integer.toString(TUP);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);

        }else if(drpNOC.getSelectedItem().equals("12") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select TCP, TNUR, TNUP, GPA from SRT_DP1_vw_Table where Matric_No = '"+ txtMatricNo1.getText() +"' ");

                while(rs.next()){

                    cp1 = Integer.parseInt(rs.getString("TCP"));
                    cp2 = Integer.parseInt(rs.getString("TNUR"));
                    cp3 = Integer.parseInt(rs.getString("TNUP"));
                    cp4 = Double.parseDouble(rs.getString("GPA"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
            
            //Total Units
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11 + Unit12;
            int TU2 = TU + cp2;
            
            //Total GPA
            
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) +
            (P7 * Unit7) + (P8 * Unit8) + (P9 * Unit9) + (P10 * Unit10) + (P11 * Unit11) + (P12 * Unit12))/TU;
            
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            //Total Credit Point
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7)
             + (P8 * Unit8)+ (P9 * Unit9)+ (P10 * Unit10)+ (P11 * Unit11)+ (P12 * Unit12);
            TS_3 = TS_2 + cp1;
            
            TS2_1 = ((TS_3)/TU2);
            BigDecimal cgp = new BigDecimal(Double.toString(TS2_1));
            cgp = cgp.setScale(2, RoundingMode.HALF_UP);
            double TSS2 = cgp.doubleValue();
            TSS22 = Double.toString(TSS2);
            
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            int tc2 = (int) TS_3;
            TCP2 = Integer.toString(tc2);
            lblTUCP.setText(TCP);

            TSU = Integer.toString(TU);
            TSU2 = Integer.toString(TU2);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="", f6="", f7="", f8="", f9="", f10="", f11="", f12="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            if(P7 < 2.0){
                Unit7 = 0;
                f7 = CC7.getSelectedItem().toString();
            }
            if(P8 < 2.0){
                Unit8 = 0;
                f8 = CC8.getSelectedItem().toString();
            }
            if(P9 < 2.0){
                Unit9 = 0;
                f9 = CC9.getSelectedItem().toString();
            }
            if(P10 < 2.0){
                Unit10 = 0;
                f10 = CC10.getSelectedItem().toString();
            }
            if(P11 < 2.0){
                Unit11 = 0;
                f11 = CC11.getSelectedItem().toString();
            }
            if(P12 < 2.0){
                Unit12 = 0;
                f12 = CC12.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0 || Unit6 == 0 || Unit7 == 0 || Unit8 == 0
                    || Unit9 == 0 || Unit10 == 0 || Unit11 == 0 || Unit12 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7 + " " + f8
                    + " " + f9 + " " + f10 + " " + f11 + " " + f12);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11 + Unit12;
            int TUP2 = TUP + cp3;
            TSU = Integer.toString(TUP);
            TNUP2 = Integer.toString(TUP2);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);
            lblCGPA.setText(TSS22);
            
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)

    }
    if(drpNOC.getSelectedItem().equals("13") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
    
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11 + Unit12 + Unit13;
            
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) +
            (P7 * Unit7) + (P8 * Unit8) + (P9 * Unit9) + (P10 * Unit10) + (P11 * Unit11) + (P12 * Unit12) + (P13 * Unit13))/TU;
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            TSU = Integer.toString(TU);
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7)
            + (P8 * Unit8)+ (P9 * Unit9)+ (P10 * Unit10) + (P11 * Unit11) + (P12 * Unit12) + (P13 * Unit13);
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            lblTUCP.setText(TCP);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="", f6="", f7="", f8="", f9="", f10="", f11="", f12="", f13="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            if(P7 < 2.0){
                Unit7 = 0;
                f7 = CC7.getSelectedItem().toString();
            }
            if(P8 < 2.0){
                Unit8 = 0;
                f8 = CC8.getSelectedItem().toString();
            }
            if(P9 < 2.0){
                Unit9 = 0;
                f9 = CC9.getSelectedItem().toString();
            }
            if(P10 < 2.0){
                Unit10 = 0;
                f10 = CC10.getSelectedItem().toString();
            }
            if(P11 < 2.0){
                Unit11 = 0;
                f11 = CC11.getSelectedItem().toString();
            }
            if(P12 < 2.0){
                Unit12 = 0;
                f12 = CC11.getSelectedItem().toString();
            }
            if(P13 < 2.0){
                Unit13 = 0;
                f13 = CC13.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0 || Unit6 == 0 || Unit7 == 0 || Unit8 == 0
                    || Unit9 == 0 || Unit10 == 0 || Unit11 == 0 || Unit12 == 0 || Unit13 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7 + " " + f8
                    + " " + f9 + " " + f10 + " " + f11 + " " + f12 + " " + f13);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11 + Unit12 + Unit13;
            TSU = Integer.toString(TUP);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);

        }else if(drpNOC.getSelectedItem().equals("13") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select TCP, TNUR, TNUP, GPA from SRT_DP1_vw_Table where Matric_No = '"+ txtMatricNo1.getText() +"' ");

                while(rs.next()){

                    cp1 = Integer.parseInt(rs.getString("TCP"));
                    cp2 = Integer.parseInt(rs.getString("TNUR"));
                    cp3 = Integer.parseInt(rs.getString("TNUP"));
                    cp4 = Double.parseDouble(rs.getString("GPA"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
            
            //Total Units
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11 + Unit12 + Unit13;
            int TU2 = TU + cp2;
            
            //Total GPA
            
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) +
            (P7 * Unit7) + (P8 * Unit8) + (P9 * Unit9) + (P10 * Unit10) + (P11 * Unit11) + (P12 * Unit12) + (P13 * Unit13))/TU;
            
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            //Total Credit Point
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7)
             + (P8 * Unit8)+ (P9 * Unit9)+ (P10 * Unit10)+ (P11 * Unit11)+ (P12 * Unit12)+ (P13 * Unit13);
            TS_3 = TS_2 + cp1;
            
            TS2_1 = ((TS_3)/TU2);
            BigDecimal cgp = new BigDecimal(Double.toString(TS2_1));
            cgp = cgp.setScale(2, RoundingMode.HALF_UP);
            double TSS2 = cgp.doubleValue();
            TSS22 = Double.toString(TSS2);
            
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            int tc2 = (int) TS_3;
            TCP2 = Integer.toString(tc2);
            lblTUCP.setText(TCP);

            TSU = Integer.toString(TU);
            TSU2 = Integer.toString(TU2);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="", f6="", f7="", f8="", f9="", f10="", f11="", f12="", f13="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            if(P7 < 2.0){
                Unit7 = 0;
                f7 = CC7.getSelectedItem().toString();
            }
            if(P8 < 2.0){
                Unit8 = 0;
                f8 = CC8.getSelectedItem().toString();
            }
            if(P9 < 2.0){
                Unit9 = 0;
                f9 = CC9.getSelectedItem().toString();
            }
            if(P10 < 2.0){
                Unit10 = 0;
                f10 = CC10.getSelectedItem().toString();
            }
            if(P11 < 2.0){
                Unit11 = 0;
                f11 = CC11.getSelectedItem().toString();
            }
            if(P12 < 2.0){
                Unit12 = 0;
                f12 = CC11.getSelectedItem().toString();
            }
            if(P13 < 2.0){
                Unit13 = 0;
                f13 = CC13.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0 || Unit6 == 0 || Unit7 == 0 || Unit8 == 0
                    || Unit9 == 0 || Unit10 == 0 || Unit11 == 0 || Unit12 == 0 || Unit13 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7 + " " + f8
                    + " " + f9 + " " + f10 + " " + f11 + " " + f12 + " " + f13);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11 + Unit12 + Unit13;
            int TUP2 = TUP + cp3;
            TSU = Integer.toString(TUP);
            TNUP2 = Integer.toString(TUP2);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);
            lblCGPA.setText(TSS22);
            
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)

    }
    if(drpNOC.getSelectedItem().equals("14") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
    
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11 + Unit12
                    + Unit13+ Unit14;
            
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) +
            (P7 * Unit7) + (P8 * Unit8) + (P9 * Unit9) + (P10 * Unit10) + (P11 * Unit11) + (P12 * Unit12)
                    + (P13 * Unit13) + (P14 * Unit14))/TU;
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            TSU = Integer.toString(TU);
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7)
            + (P8 * Unit8)+ (P9 * Unit9)+ (P10 * Unit10) + (P11 * Unit11) + (P12 * Unit12) + (P13 * Unit13) + (P14 * Unit14);
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            lblTUCP.setText(TCP);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="", f6="", f7="", f8="", f9="", f10="", f11="", f12="", f13="", f14="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            if(P7 < 2.0){
                Unit7 = 0;
                f7 = CC7.getSelectedItem().toString();
            }
            if(P8 < 2.0){
                Unit8 = 0;
                f8 = CC8.getSelectedItem().toString();
            }
            if(P9 < 2.0){
                Unit9 = 0;
                f9 = CC9.getSelectedItem().toString();
            }
            if(P10 < 2.0){
                Unit10 = 0;
                f10 = CC10.getSelectedItem().toString();
            }
            if(P11 < 2.0){
                Unit11 = 0;
                f11 = CC11.getSelectedItem().toString();
            }
            if(P12 < 2.0){
                Unit12 = 0;
                f12 = CC11.getSelectedItem().toString();
            }
            if(P13 < 2.0){
                Unit13 = 0;
                f13 = CC13.getSelectedItem().toString();
            }
            if(P14 < 2.0){
                Unit14 = 0;
                f14 = CC14.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0 || Unit6 == 0 || Unit7 == 0 || Unit8 == 0
                    || Unit9 == 0 || Unit10 == 0 || Unit11 == 0 || Unit12 == 0 || Unit13 == 0 || Unit14 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7 + " " + f8
                    + " " + f9 + " " + f10 + " " + f11 + " " + f12 + " " + f13 + " " + f14);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11 + Unit12
                    + Unit13+ Unit14;
            TSU = Integer.toString(TUP);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);

        }else if(drpNOC.getSelectedItem().equals("14") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select TCP, TNUR, TNUP, GPA from SRT_DP1_vw_Table where Matric_No = '"+ txtMatricNo1.getText() +"' ");

                while(rs.next()){

                    cp1 = Integer.parseInt(rs.getString("TCP"));
                    cp2 = Integer.parseInt(rs.getString("TNUR"));
                    cp3 = Integer.parseInt(rs.getString("TNUP"));
                    cp4 = Double.parseDouble(rs.getString("GPA"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
            
            //Total Units
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11 + Unit12
                    + Unit13+ Unit14;
            int TU2 = TU + cp2;
            
            //Total GPA
            
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) +
            (P7 * Unit7) + (P8 * Unit8) + (P9 * Unit9) + (P10 * Unit10) + (P11 * Unit11) + (P12 * Unit12) + (P13 * Unit13) + (P14 * Unit14))/TU;
            
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            
            //Total Credit Point
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7)
             + (P8 * Unit8)+ (P9 * Unit9)+ (P10 * Unit10)+ (P11 * Unit11)+ (P12 * Unit12)+ (P13 * Unit13)+ (P14 * Unit14);
            TS_3 = TS_2 + cp1;
            
            TS2_1 = ((TS_3)/TU2);
            BigDecimal cgp = new BigDecimal(Double.toString(TS2_1));
            cgp = cgp.setScale(2, RoundingMode.HALF_UP);
            double TSS2 = cgp.doubleValue();
            TSS22 = Double.toString(TSS2);
            
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            int tc2 = (int) TS_3;
            TCP2 = Integer.toString(tc2);
            lblTUCP.setText(TCP);

            TSU = Integer.toString(TU);
            TSU2 = Integer.toString(TU2);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="", f6="", f7="", f8="", f9="", f10="", f11="", f12="", f13="", f14="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            if(P7 < 2.0){
                Unit7 = 0;
                f7 = CC7.getSelectedItem().toString();
            }
            if(P8 < 2.0){
                Unit8 = 0;
                f8 = CC8.getSelectedItem().toString();
            }
            if(P9 < 2.0){
                Unit9 = 0;
                f9 = CC9.getSelectedItem().toString();
            }
            if(P10 < 2.0){
                Unit10 = 0;
                f10 = CC10.getSelectedItem().toString();
            }
            if(P11 < 2.0){
                Unit11 = 0;
                f11 = CC11.getSelectedItem().toString();
            }
            if(P12 < 2.0){
                Unit12 = 0;
                f12 = CC11.getSelectedItem().toString();
            }
            if(P13 < 2.0){
                Unit13 = 0;
                f13 = CC13.getSelectedItem().toString();
            }
            if(P14 < 2.0){
                Unit14 = 0;
                f14 = CC14.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0 || Unit6 == 0 || Unit7 == 0 || Unit8 == 0
                    || Unit9 == 0 || Unit10 == 0 || Unit11 == 0 || Unit12 == 0 || Unit13 == 0 || Unit14 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7 + " " + f8
                    + " " + f9 + " " + f10 + " " + f11 + " " + f12 + " " + f13 + " " + f14);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11 + Unit12
                    + Unit13+ Unit14;
            int TUP2 = TUP + cp3;
            TSU = Integer.toString(TUP);
            TNUP2 = Integer.toString(TUP2);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);
            lblCGPA.setText(TSS22);
            
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)

    }
    
   if(drpNOC.getSelectedItem().equals("15") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
    
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11 + Unit12
                    + Unit13 + Unit14 + Unit15;
            
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) +
            (P7 * Unit7) + (P8 * Unit8) + (P9 * Unit9) + (P10 * Unit10) + (P11 * Unit11) + (P12 * Unit12)
                    + (P13 * Unit13) + (P14 * Unit14) + (P15 * Unit15))/TU;
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            TSU = Integer.toString(TU);
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7)
            + (P8 * Unit8)+ (P9 * Unit9)+ (P10 * Unit10) + (P11 * Unit11) + (P12 * Unit12) + (P13 * Unit13) + (P14 * Unit14) + (P15 * Unit15);
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            lblTUCP.setText(TCP);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="", f6="", f7="", f8="", f9="", f10="", f11="", f12="", f13="", f14="", f15="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            if(P7 < 2.0){
                Unit7 = 0;
                f7 = CC7.getSelectedItem().toString();
            }
            if(P8 < 2.0){
                Unit8 = 0;
                f8 = CC8.getSelectedItem().toString();
            }
            if(P9 < 2.0){
                Unit9 = 0;
                f9 = CC9.getSelectedItem().toString();
            }
            if(P10 < 2.0){
                Unit10 = 0;
                f10 = CC10.getSelectedItem().toString();
            }
            if(P11 < 2.0){
                Unit11 = 0;
                f11 = CC11.getSelectedItem().toString();
            }
            if(P12 < 2.0){
                Unit12 = 0;
                f12 = CC11.getSelectedItem().toString();
            }
            if(P13 < 2.0){
                Unit13 = 0;
                f13 = CC13.getSelectedItem().toString();
            }
            if(P14 < 2.0){
                Unit14 = 0;
                f14 = CC14.getSelectedItem().toString();
            }
            if(P15 < 2.0){
                Unit15 = 0;
                f15 = CC15.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0 || Unit6 == 0 || Unit7 == 0 || Unit8 == 0
                    || Unit9 == 0 || Unit10 == 0 || Unit11 == 0 || Unit12 == 0 || Unit13 == 0 || Unit14 == 0 || Unit15 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7 + " " + f8
                    + " " + f9 + " " + f10 + " " + f11 + " " + f12 + " " + f13 + " " + f14 + " " + f15);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11 + Unit12
                    + Unit13 + Unit14 + Unit15;
            TSU = Integer.toString(TUP);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);

        }else if(drpNOC.getSelectedItem().equals("15") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select TCP, TNUR, TNUP, GPA from SRT_DP1_vw_Table where Matric_No = '"+ txtMatricNo1.getText() +"' ");

                while(rs.next()){

                    cp1 = Integer.parseInt(rs.getString("TCP"));
                    cp2 = Integer.parseInt(rs.getString("TNUR"));
                    cp3 = Integer.parseInt(rs.getString("TNUP"));
                    cp4 = Double.parseDouble(rs.getString("GPA"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
            
            //Total Units
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11 + Unit12
                    + Unit13 + Unit14 + Unit15;
            int TU2 = TU + cp2;
            
            //Total GPA
            
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) +
            (P7 * Unit7) + (P8 * Unit8) + (P9 * Unit9) + (P10 * Unit10) + (P11 * Unit11) + (P12 * Unit12) + (P13 * Unit13)
                    + (P14 * Unit14) + (P15 * Unit15))/TU;
            
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            
            //Total Credit Point
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7)
             + (P8 * Unit8)+ (P9 * Unit9)+ (P10 * Unit10)+ (P11 * Unit11)+ (P12 * Unit12)+ (P13 * Unit13)+ (P14 * Unit14)+ (P15 * Unit15);
            TS_3 = TS_2 + cp1;
            
            TS2_1 = ((TS_3)/TU2);
            BigDecimal cgp = new BigDecimal(Double.toString(TS2_1));
            cgp = cgp.setScale(2, RoundingMode.HALF_UP);
            double TSS2 = cgp.doubleValue();
            TSS22 = Double.toString(TSS2);
            
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            int tc2 = (int) TS_3;
            TCP2 = Integer.toString(tc2);
            lblTUCP.setText(TCP);

            TSU = Integer.toString(TU);
            TSU2 = Integer.toString(TU2);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="", f6="", f7="", f8="", f9="", f10="", f11="", f12="", f13="", f14="", f15="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            if(P7 < 2.0){
                Unit7 = 0;
                f7 = CC7.getSelectedItem().toString();
            }
            if(P8 < 2.0){
                Unit8 = 0;
                f8 = CC8.getSelectedItem().toString();
            }
            if(P9 < 2.0){
                Unit9 = 0;
                f9 = CC9.getSelectedItem().toString();
            }
            if(P10 < 2.0){
                Unit10 = 0;
                f10 = CC10.getSelectedItem().toString();
            }
            if(P11 < 2.0){
                Unit11 = 0;
                f11 = CC11.getSelectedItem().toString();
            }
            if(P12 < 2.0){
                Unit12 = 0;
                f12 = CC11.getSelectedItem().toString();
            }
            if(P13 < 2.0){
                Unit13 = 0;
                f13 = CC13.getSelectedItem().toString();
            }
            if(P14 < 2.0){
                Unit14 = 0;
                f14 = CC14.getSelectedItem().toString();
            }
            if(P15 < 2.0){
                Unit15 = 0;
                f15 = CC15.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0 || Unit6 == 0 || Unit7 == 0 || Unit8 == 0
                    || Unit9 == 0 || Unit10 == 0 || Unit11 == 0 || Unit12 == 0 || Unit13 == 0 || Unit14 == 0 || Unit15 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7 + " " + f8
                    + " " + f9 + " " + f10 + " " + f11 + " " + f12 + " " + f13 + " " + f14 + " " + f15);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11 + Unit12
                    + Unit13 + Unit14 + Unit15;
            int TUP2 = TUP + cp3;
            TSU = Integer.toString(TUP);
            TNUP2 = Integer.toString(TUP2);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);
            lblCGPA.setText(TSS22);
            
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)

    }
     
   if(drpNOC.getSelectedItem().equals("16") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
    
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11 + Unit12
                    + Unit13 + Unit14 + Unit15 + Unit16;
            
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) +
            (P7 * Unit7) + (P8 * Unit8) + (P9 * Unit9) + (P10 * Unit10) + (P11 * Unit11) + (P12 * Unit12)
                    + (P13 * Unit13) + (P14 * Unit14) + (P15 * Unit15) + (P16 * Unit16))/TU;
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            TSU = Integer.toString(TU);
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7)
            + (P8 * Unit8)+ (P9 * Unit9)+ (P10 * Unit10) + (P11 * Unit11) + (P12 * Unit12) + (P13 * Unit13) + (P14 * Unit14)
                    + (P15 * Unit15)+ (P16 * Unit16);
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            lblTUCP.setText(TCP);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="", f6="", f7="", f8="", f9="", f10="", f11="", f12="", f13="", f14="", f15="", f16="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            if(P7 < 2.0){
                Unit7 = 0;
                f7 = CC7.getSelectedItem().toString();
            }
            if(P8 < 2.0){
                Unit8 = 0;
                f8 = CC8.getSelectedItem().toString();
            }
            if(P9 < 2.0){
                Unit9 = 0;
                f9 = CC9.getSelectedItem().toString();
            }
            if(P10 < 2.0){
                Unit10 = 0;
                f10 = CC10.getSelectedItem().toString();
            }
            if(P11 < 2.0){
                Unit11 = 0;
                f11 = CC11.getSelectedItem().toString();
            }
            if(P12 < 2.0){
                Unit12 = 0;
                f12 = CC11.getSelectedItem().toString();
            }
            if(P13 < 2.0){
                Unit13 = 0;
                f13 = CC13.getSelectedItem().toString();
            }
            if(P14 < 2.0){
                Unit14 = 0;
                f14 = CC14.getSelectedItem().toString();
            }
            if(P15 < 2.0){
                Unit15 = 0;
                f15 = CC15.getSelectedItem().toString();
            }
            if(P16 < 2.0){
                Unit16 = 0;
                f16 = CC16.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0 || Unit6 == 0 || Unit7 == 0 || Unit8 == 0
                    || Unit9 == 0 || Unit10 == 0 || Unit11 == 0 || Unit12 == 0 || Unit13 == 0 || Unit14 == 0 || Unit15 == 0 || Unit16 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7 + " " + f8
                    + " " + f9 + " " + f10 + " " + f11 + " " + f12 + " " + f13 + " " + f14 + " " + f15 + " " + f16);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11 + Unit12
                    + Unit13 + Unit14 + Unit15 + Unit16;
            TSU = Integer.toString(TUP);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);

        }else if(drpNOC.getSelectedItem().equals("16") & drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select TCP, TNUR, TNUP, GPA from SRT_DP1_vw_Table where Matric_No = '"+ txtMatricNo1.getText() +"' ");

                while(rs.next()){

                    cp1 = Integer.parseInt(rs.getString("TCP"));
                    cp2 = Integer.parseInt(rs.getString("TNUR"));
                    cp3 = Integer.parseInt(rs.getString("TNUP"));
                    cp4 = Double.parseDouble(rs.getString("GPA"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
            
            //Total Units
            int TU = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11 + Unit12
                    + Unit13 + Unit14 + Unit15 + Unit16;
            int TU2 = TU + cp2;
            
            //Total GPA
            
            TS_1 = ((P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) +
            (P7 * Unit7) + (P8 * Unit8) + (P9 * Unit9) + (P10 * Unit10) + (P11 * Unit11) + (P12 * Unit12) + (P13 * Unit13)
                    + (P14 * Unit14) + (P15 * Unit15) + (P16 * Unit16))/TU;
            
            BigDecimal bd = new BigDecimal(Double.toString(TS_1));
            bd = bd.setScale(2, RoundingMode.HALF_UP);
            double TSS1 = bd.doubleValue();
            TSS = Double.toString(TSS1);
            
            
            //Total Credit Point
            TS_2 = (P1 * Unit1) + (P2 * Unit2) + (P3 * Unit3) + (P4 * Unit4) + (P5 * Unit5) + (P6 * Unit6) + (P7 * Unit7)
             + (P8 * Unit8)+ (P9 * Unit9)+ (P10 * Unit10)+ (P11 * Unit11)+ (P12 * Unit12)+ (P13 * Unit13)+ (P14 * Unit14)
                    + (P15 * Unit15)+ (P16 * Unit16);
            TS_3 = TS_2 + cp1;
            
            TS2_1 = ((TS_3)/TU2);
            BigDecimal cgp = new BigDecimal(Double.toString(TS2_1));
            cgp = cgp.setScale(2, RoundingMode.HALF_UP);
            double TSS2 = cgp.doubleValue();
            TSS22 = Double.toString(TSS2);
            
            int tc = (int) TS_2;
            TCP = Integer.toString(tc);
            int tc2 = (int) TS_3;
            TCP2 = Integer.toString(tc2);
            lblTUCP.setText(TCP);

            TSU = Integer.toString(TU);
            TSU2 = Integer.toString(TU2);
            lblTU.setText(TSU);
            
            String f1="", f2="", f3="", f4="", f5="", f6="", f7="", f8="", f9="", f10="", f11="", f12="", f13="", f14="", f15="", f16="";
            if(P1 < 2.0){
                Unit1 = 0;
                f1 = CC1.getSelectedItem().toString();
            }
            if(P2 < 2.0){
                Unit2 = 0;
                f2 = CC2.getSelectedItem().toString();
            }
            if(P3 < 2.0){
                Unit3 = 0;
                f3 = CC3.getSelectedItem().toString();
            }
            if(P4 < 2.0){
                Unit4 = 0;
                f4 = CC4.getSelectedItem().toString();
            }
            if(P5 < 2.0){
                Unit5 = 0;
                f5 = CC5.getSelectedItem().toString();
            }
            if(P6 < 2.0){
                Unit6 = 0;
                f6 = CC6.getSelectedItem().toString();
            }
            if(P7 < 2.0){
                Unit7 = 0;
                f7 = CC7.getSelectedItem().toString();
            }
            if(P8 < 2.0){
                Unit8 = 0;
                f8 = CC8.getSelectedItem().toString();
            }
            if(P9 < 2.0){
                Unit9 = 0;
                f9 = CC9.getSelectedItem().toString();
            }
            if(P10 < 2.0){
                Unit10 = 0;
                f10 = CC10.getSelectedItem().toString();
            }
            if(P11 < 2.0){
                Unit11 = 0;
                f11 = CC11.getSelectedItem().toString();
            }
            if(P12 < 2.0){
                Unit12 = 0;
                f12 = CC11.getSelectedItem().toString();
            }
            if(P13 < 2.0){
                Unit13 = 0;
                f13 = CC13.getSelectedItem().toString();
            }
            if(P14 < 2.0){
                Unit14 = 0;
                f14 = CC14.getSelectedItem().toString();
            }
            if(P15 < 2.0){
                Unit15 = 0;
                f15 = CC15.getSelectedItem().toString();
            }
            if(P16 < 2.0){
                Unit16 = 0;
                f16 = CC16.getSelectedItem().toString();
            }
            
            if(Unit1 == 0 || Unit2 == 0 || Unit3 == 0 || Unit4 == 0 || Unit5 == 0 || Unit6 == 0 || Unit7 == 0 || Unit8 == 0
                    || Unit9 == 0 || Unit10 == 0 || Unit11 == 0 || Unit12 == 0 || Unit13 == 0 || Unit14 == 0 || Unit15 == 0 || Unit16 == 0){
            lblRM.setText("FAILED : " + f1 + " " + f2 + " " + f3 + " " + f4 + " " + f5 + " " + f6 + " " + f7 + " " + f8
                    + " " + f9 + " " + f10 + " " + f11 + " " + f12 + " " + f13 + " " + f14 + " " + f15 + " " + f16);
            }
            else{
            lblRM.setText("PASSED");
            }
            
            int TUP = Unit1 + Unit2 + Unit3 + Unit4 + Unit5 + Unit6 + Unit7 + Unit8 + Unit9 + Unit10 + Unit11 + Unit12
                    + Unit13 + Unit14 + Unit15 + Unit16;
            int TUP2 = TUP + cp3;
            TSU = Integer.toString(TUP);
            TNUP2 = Integer.toString(TUP2);
            lblTUP.setText(TSU);
            
            lblGPA.setText(TSS);
            lblCGPA.setText(TSS22);
            
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)

        }
    
    }
    }//GEN-LAST:event_btnComptActionPerformed

    private void txtS2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS2FocusGained
        // TODO add your handling code here:

        if( txtS2.getText().equals("0")){
            txtS2.setText("");
            txtS2.setForeground(Color.BLACK);
            txtS2.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS2FocusGained

    private void txtS2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS2FocusLost
        // TODO add your handling code here:
        if( txtS2.getText().equals("")){
            txtS2.setText("0");
            txtS2.setForeground(Color.GRAY);
            txtS2.setFont(new Font("TimesRoman", Font.ITALIC, 14));
        }
    }//GEN-LAST:event_txtS2FocusLost

    private void txtS2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtS2MouseClicked
        // TODO add your handling code here:
        if( txtS2.getText().equals("0")){
            txtS2.setText("");
            txtS2.setForeground(Color.BLACK);
            txtS2.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS2MouseClicked

    private void txtS2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtS2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtS2ActionPerformed

    private void CC2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CC2ActionPerformed
        // TODO add your handling code here:
        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
            Connection connect = DriverManager.getConnection(url);
            Statement st = connect.createStatement();
            ResultSet rs = st.executeQuery("select * from Course_vw_Table");

            //CC2.removeAllItems();
            //CC2.addItem("-- select --");
            while(rs.next()){

                if(CC2.getSelectedItem().equals(rs.getString("Course_Code"))){

                    txtU2.setText(rs.getString("Course_Unit"));
                }

            }
            connect.close();

        }catch(Exception Error){

            JOptionPane.showMessageDialog(null, Error);
        }
    }//GEN-LAST:event_CC2ActionPerformed

    private void txtS6FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS6FocusGained
        // TODO add your handling code here:
        if( txtS6.getText().equals("0")){
            txtS6.setText("");
            txtS6.setForeground(Color.BLACK);
            txtS6.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS6FocusGained

    private void txtS6FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS6FocusLost
        // TODO add your handling code here:
        if( txtS6.getText().equals("")){
            txtS6.setText("0");
            txtS6.setForeground(Color.GRAY);
            txtS6.setFont(new Font("TimesRoman", Font.ITALIC, 14));
        }
    }//GEN-LAST:event_txtS6FocusLost

    private void txtS6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtS6MouseClicked
        // TODO add your handling code here:
        if( txtS6.getText().equals("0")){
            txtS6.setText("");
            txtS6.setForeground(Color.BLACK);
            txtS6.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS6MouseClicked

    private void CC6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CC6ActionPerformed
        // TODO add your handling code here:

        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
            Connection connect = DriverManager.getConnection(url);
            Statement st = connect.createStatement();
            ResultSet rs = st.executeQuery("select * from Course_vw_Table");

            //CC6.removeAllItems();
            //CC6.addItem("-- select --");
            while(rs.next()){

                if(CC6.getSelectedItem().equals(rs.getString("Course_Code"))){

                    txtU5.setText(rs.getString("Course_Unit"));
                }

            }
            connect.close();

        }catch(Exception Error){

            JOptionPane.showMessageDialog(null, Error);
        }
    }//GEN-LAST:event_CC6ActionPerformed

    private void txtS3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS3FocusGained
        // TODO add your handling code here:
        if( txtS3.getText().equals("0")){
            txtS3.setText("");
            txtS3.setForeground(Color.BLACK);
            txtS3.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS3FocusGained

    private void txtS3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS3FocusLost
        // TODO add your handling code here:
        if( txtS3.getText().equals("")){
            txtS3.setText("0");
            txtS3.setForeground(Color.GRAY);
            txtS3.setFont(new Font("TimesRoman", Font.ITALIC, 14));
        }
    }//GEN-LAST:event_txtS3FocusLost

    private void txtS3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtS3MouseClicked
        // TODO add your handling code here:
        if( txtS3.getText().equals("0")){
            txtS3.setText("");
            txtS3.setForeground(Color.BLACK);
            txtS3.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS3MouseClicked

    private void txtS3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtS3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtS3ActionPerformed

    private void CC3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CC3ActionPerformed
        // TODO add your handling code here:
        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
            Connection connect = DriverManager.getConnection(url);
            Statement st = connect.createStatement();
            ResultSet rs = st.executeQuery("select * from Course_vw_Table");

            //CC3.removeAllItems();
            //CC3.addItem("-- select --");
            while(rs.next()){

                if(CC3.getSelectedItem().equals(rs.getString("Course_Code"))){

                    txtU3.setText(rs.getString("Course_Unit"));
                }

            }
            connect.close();

        }catch(Exception Error){

            JOptionPane.showMessageDialog(null, Error);
        }
    }//GEN-LAST:event_CC3ActionPerformed

    private void txtS5FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS5FocusGained
        // TODO add your handling code here:
        if( txtS5.getText().equals("0")){
            txtS5.setText("");
            txtS5.setForeground(Color.BLACK);
            txtS5.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS5FocusGained

    private void txtS5FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS5FocusLost
        // TODO add your handling code here:
        if( txtS5.getText().equals("")){
            txtS5.setText("0");
            txtS5.setForeground(Color.GRAY);
            txtS5.setFont(new Font("TimesRoman", Font.ITALIC, 14));
        }
    }//GEN-LAST:event_txtS5FocusLost

    private void txtS5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtS5MouseClicked
        // TODO add your handling code here:
        if( txtS5.getText().equals("0")){
            txtS5.setText("");
            txtS5.setForeground(Color.BLACK);
            txtS5.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS5MouseClicked

    private void txtS5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtS5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtS5ActionPerformed

    private void CC5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CC5ActionPerformed
        // TODO add your handling code here:
        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
            Connection connect = DriverManager.getConnection(url);
            Statement st = connect.createStatement();
            ResultSet rs = st.executeQuery("select * from Course_vw_Table");

            //CC5.removeAllItems();
            //CC5.addItem("-- select --");
            while(rs.next()){

                if(CC5.getSelectedItem().equals(rs.getString("Course_Code"))){

                    txtU4.setText(rs.getString("Course_Unit"));
                }

            }
            connect.close();

        }catch(Exception Error){

            JOptionPane.showMessageDialog(null, Error);
        }
    }//GEN-LAST:event_CC5ActionPerformed

    private void txtS9FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS9FocusGained
        // TODO add your handling code here:
        if( txtS9.getText().equals("0")){
            txtS9.setText("");
            txtS9.setForeground(Color.BLACK);
            txtS9.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS9FocusGained

    private void txtS9FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS9FocusLost
        // TODO add your handling code here:
        if( txtS9.getText().equals("")){
            txtS9.setText("0");
            txtS9.setForeground(Color.GRAY);
            txtS9.setFont(new Font("TimesRoman", Font.ITALIC, 14));
        }
    }//GEN-LAST:event_txtS9FocusLost

    private void txtS9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtS9MouseClicked
        // TODO add your handling code here:
        if( txtS9.getText().equals("0")){
            txtS9.setText("");
            txtS9.setForeground(Color.BLACK);
            txtS9.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS9MouseClicked

    private void CC9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CC9ActionPerformed
        // TODO add your handling code here:

        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
            Connection connect = DriverManager.getConnection(url);
            Statement st = connect.createStatement();
            ResultSet rs = st.executeQuery("select * from Course_vw_Table");

            //CC9.removeAllItems();
            //CC9.addItem("-- select --");
            while(rs.next()){

                if(CC9.getSelectedItem().equals(rs.getString("Course_Code"))){

                    txtU7.setText(rs.getString("Course_Unit"));
                }

            }
            connect.close();

        }catch(Exception Error){

            JOptionPane.showMessageDialog(null, Error);
        }
    }//GEN-LAST:event_CC9ActionPerformed

    private void txtS4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS4FocusGained
        // TODO add your handling code here:
        if( txtS4.getText().equals("0")){
            txtS4.setText("");
            txtS4.setForeground(Color.BLACK);
            txtS4.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS4FocusGained

    private void txtS4FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS4FocusLost
        // TODO add your handling code here:
        if( txtS4.getText().equals("")){
            txtS4.setText("0");
            txtS4.setForeground(Color.GRAY);
            txtS4.setFont(new Font("TimesRoman", Font.ITALIC, 14));
        }
    }//GEN-LAST:event_txtS4FocusLost

    private void txtS4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtS4MouseClicked
        // TODO add your handling code here:
        if( txtS4.getText().equals("0")){
            txtS4.setText("");
            txtS4.setForeground(Color.BLACK);
            txtS4.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS4MouseClicked

    private void CC7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CC7ActionPerformed
        // TODO add your handling code here:

        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
            Connection connect = DriverManager.getConnection(url);
            Statement st = connect.createStatement();
            ResultSet rs = st.executeQuery("select * from Course_vw_Table");

            //CC7.removeAllItems();
            //CC7.addItem("-- select --");
            while(rs.next()){

                if(CC7.getSelectedItem().equals(rs.getString("Course_Code"))){

                    txtU6.setText(rs.getString("Course_Unit"));
                }

            }
            connect.close();

        }catch(Exception Error){

            JOptionPane.showMessageDialog(null, Error);
        }
    }//GEN-LAST:event_CC7ActionPerformed

    private void txtS7FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS7FocusGained
        // TODO add your handling code here:
        if( txtS7.getText().equals("0")){
            txtS7.setText("");
            txtS7.setForeground(Color.BLACK);
            txtS7.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS7FocusGained

    private void txtS7FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS7FocusLost
        // TODO add your handling code here:
        if( txtS7.getText().equals("")){
            txtS7.setText("0");
            txtS7.setForeground(Color.GRAY);
            txtS7.setFont(new Font("TimesRoman", Font.ITALIC, 14));
        }
    }//GEN-LAST:event_txtS7FocusLost

    private void txtS7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtS7MouseClicked
        // TODO add your handling code here:
        if( txtS7.getText().equals("0")){
            txtS7.setText("");
            txtS7.setForeground(Color.BLACK);
            txtS7.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS7MouseClicked

    private void CC10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CC10ActionPerformed
        // TODO add your handling code here:

        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
            Connection connect = DriverManager.getConnection(url);
            Statement st = connect.createStatement();
            ResultSet rs = st.executeQuery("select * from Course_vw_Table");

            while(rs.next()){

                //CC10.removeAllItems();
                //CC10.addItem("-- select --");
                if(CC10.getSelectedItem().equals(rs.getString("Course_Code"))){

                    txtU8.setText(rs.getString("Course_Unit"));
                }

            }
            connect.close();

        }catch(Exception Error){

            JOptionPane.showMessageDialog(null, Error);
        }
    }//GEN-LAST:event_CC10ActionPerformed

    private void txtS10FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS10FocusGained
        // TODO add your handling code here:
        if( txtS10.getText().equals("0")){
            txtS10.setText("");
            txtS10.setForeground(Color.BLACK);
            txtS10.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS10FocusGained

    private void txtS10FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS10FocusLost
        // TODO add your handling code here:
        if( txtS10.getText().equals("")){
            txtS10.setText("0");
            txtS10.setForeground(Color.GRAY);
            txtS10.setFont(new Font("TimesRoman", Font.ITALIC, 14));
        }
    }//GEN-LAST:event_txtS10FocusLost

    private void txtS10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtS10MouseClicked
        // TODO add your handling code here:
        if( txtS10.getText().equals("0")){
            txtS10.setText("");
            txtS10.setForeground(Color.BLACK);
            txtS10.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS10MouseClicked

    private void CC11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CC11ActionPerformed
        // TODO add your handling code here:

        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
            Connection connect = DriverManager.getConnection(url);
            Statement st = connect.createStatement();
            ResultSet rs = st.executeQuery("select * from Course_vw_Table");

            //CC11.removeAllItems();
            //CC11.addItem("-- select --");
            while(rs.next()){

                if(CC11.getSelectedItem().equals(rs.getString("Course_Code"))){

                    txtU9.setText(rs.getString("Course_Unit"));
                }

            }
            connect.close();

        }catch(Exception Error){

            JOptionPane.showMessageDialog(null, Error);
        }
    }//GEN-LAST:event_CC11ActionPerformed

    private void sbyDepart14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sbyDepart14ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sbyDepart14ActionPerformed

    private void sbyDepart18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sbyDepart18ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sbyDepart18ActionPerformed

    private void txtS8FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS8FocusGained
        // TODO add your handling code here:
        if( txtS8.getText().equals("0")){
            txtS8.setText("");
            txtS8.setForeground(Color.BLACK);
            txtS8.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS8FocusGained

    private void txtS8FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS8FocusLost
        // TODO add your handling code here:
        if( txtS8.getText().equals("")){
            txtS8.setText("0");
            txtS8.setForeground(Color.GRAY);
            txtS8.setFont(new Font("TimesRoman", Font.ITALIC, 14));
        }
    }//GEN-LAST:event_txtS8FocusLost

    private void txtS8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtS8MouseClicked
        // TODO add your handling code here:
        if( txtS8.getText().equals("0")){
            txtS8.setText("");
            txtS8.setForeground(Color.BLACK);
            txtS8.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS8MouseClicked

    private void CC8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CC8ActionPerformed
        // TODO add your handling code here:
        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
            Connection connect = DriverManager.getConnection(url);
            Statement st = connect.createStatement();
            ResultSet rs = st.executeQuery("select * from Course_vw_Table");

            //CC8.removeAllItems();
            //CC8.addItem("-- select --");
            while(rs.next()){

                if(CC8.getSelectedItem().equals(rs.getString("Course_Code"))){

                    txtU11.setText(rs.getString("Course_Unit"));
                }

            }
            connect.close();

        }catch(Exception Error){

            JOptionPane.showMessageDialog(null, Error);
        }
    }//GEN-LAST:event_CC8ActionPerformed

    private void sbyDepart11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sbyDepart11ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_sbyDepart11ActionPerformed

    private void sbyDepart12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sbyDepart12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sbyDepart12ActionPerformed

    private void txtS11FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS11FocusGained
        // TODO add your handling code here:
        if( txtS11.getText().equals("0")){
            txtS11.setText("");
            txtS11.setForeground(Color.BLACK);
            txtS11.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS11FocusGained

    private void txtS11FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS11FocusLost
        // TODO add your handling code here:
        if( txtS11.getText().equals("")){
            txtS11.setText("0");
            txtS11.setForeground(Color.GRAY);
            txtS11.setFont(new Font("TimesRoman", Font.ITALIC, 14));
        }
    }//GEN-LAST:event_txtS11FocusLost

    private void txtS11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtS11MouseClicked
        // TODO add your handling code here:
        if( txtS11.getText().equals("0")){
            txtS11.setText("");
            txtS11.setForeground(Color.BLACK);
            txtS11.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS11MouseClicked

    private void CC4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CC4ActionPerformed
        // TODO add your handling code here:
        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
            Connection connect = DriverManager.getConnection(url);
            Statement st = connect.createStatement();
            ResultSet rs = st.executeQuery("select * from Course_vw_Table");

            //CC4.removeAllItems();
            //CC4.addItem("-- select --");
            while(rs.next()){

                if(CC4.getSelectedItem().equals(rs.getString("Course_Code"))){

                    txtU10.setText(rs.getString("Course_Unit"));
                }

            }
            connect.close();

        }catch(Exception Error){

            JOptionPane.showMessageDialog(null, Error);
        }
    }//GEN-LAST:event_CC4ActionPerformed

    private void txtS16FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS16FocusGained
        // TODO add your handling code here:
        if( txtS16.getText().equals("0")){
            txtS16.setText("");
            txtS16.setForeground(Color.BLACK);
            txtS16.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS16FocusGained

    private void txtS16FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS16FocusLost
        // TODO add your handling code here:
        if( txtS16.getText().equals("")){
            txtS16.setText("0");
            txtS16.setForeground(Color.GRAY);
            txtS16.setFont(new Font("TimesRoman", Font.ITALIC, 14));
        }
    }//GEN-LAST:event_txtS16FocusLost

    private void txtS16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtS16MouseClicked
        // TODO add your handling code here:
        if( txtS16.getText().equals("0")){
            txtS16.setText("");
            txtS16.setForeground(Color.BLACK);
            txtS16.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS16MouseClicked

    private void CC12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CC12ActionPerformed
        // TODO add your handling code here:
        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
            Connection connect = DriverManager.getConnection(url);
            Statement st = connect.createStatement();
            ResultSet rs = st.executeQuery("select * from Course_vw_Table");

            //CC12.removeAllItems();
            //CC12.addItem("-- select --");
            while(rs.next()){

                if(CC12.getSelectedItem().equals(rs.getString("Course_Code"))){

                    txtU12.setText(rs.getString("Course_Unit"));
                }

            }
            connect.close();

        }catch(Exception Error){

            JOptionPane.showMessageDialog(null, Error);
        }
    }//GEN-LAST:event_CC12ActionPerformed

    private void txtS14FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS14FocusGained
        // TODO add your handling code here:
        if( txtS14.getText().equals("0")){
            txtS14.setText("");
            txtS14.setForeground(Color.BLACK);
            txtS14.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS14FocusGained

    private void txtS14FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS14FocusLost
        // TODO add your handling code here:
        if( txtS14.getText().equals("")){
            txtS14.setText("0");
            txtS14.setForeground(Color.GRAY);
            txtS14.setFont(new Font("TimesRoman", Font.ITALIC, 14));
        }
    }//GEN-LAST:event_txtS14FocusLost

    private void txtS14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtS14MouseClicked
        // TODO add your handling code here:
        if( txtS14.getText().equals("0")){
            txtS14.setText("");
            txtS14.setForeground(Color.BLACK);
            txtS14.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS14MouseClicked

    private void CC14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CC14ActionPerformed
        // TODO add your handling code here:

        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
            Connection connect = DriverManager.getConnection(url);
            Statement st = connect.createStatement();
            ResultSet rs = st.executeQuery("select * from Course_vw_Table");

            while(rs.next()){

                //CC14.removeAllItems();
                //CC14.addItem("-- select --");
                if(CC14.getSelectedItem().equals(rs.getString("Course_Code"))){

                    txtU14.setText(rs.getString("Course_Unit"));
                }

            }
            connect.close();

        }catch(Exception Error){

            JOptionPane.showMessageDialog(null, Error);
        }
    }//GEN-LAST:event_CC14ActionPerformed

    private void txtS13FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS13FocusGained
        // TODO add your handling code here:
        if( txtS13.getText().equals("0")){
            txtS13.setText("");
            txtS13.setForeground(Color.BLACK);
            txtS13.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS13FocusGained

    private void txtS13FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS13FocusLost
        // TODO add your handling code here:
        if( txtS13.getText().equals("")){
            txtS13.setText("0");
            txtS13.setForeground(Color.GRAY);
            txtS13.setFont(new Font("TimesRoman", Font.ITALIC, 14));
        }
    }//GEN-LAST:event_txtS13FocusLost

    private void txtS13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtS13MouseClicked
        // TODO add your handling code here:
        if( txtS13.getText().equals("0")){
            txtS13.setText("");
            txtS13.setForeground(Color.BLACK);
            txtS13.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS13MouseClicked

    private void CC13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CC13ActionPerformed
        // TODO add your handling code here:

        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
            Connection connect = DriverManager.getConnection(url);
            Statement st = connect.createStatement();
            ResultSet rs = st.executeQuery("select * from Course_vw_Table");

            //CC13.removeAllItems();
            //CC13.addItem("-- select --");
            while(rs.next()){

                if(CC13.getSelectedItem().equals(rs.getString("Course_Code"))){

                    txtU13.setText(rs.getString("Course_Unit"));
                }

            }
            connect.close();

        }catch(Exception Error){

            JOptionPane.showMessageDialog(null, Error);
        }
    }//GEN-LAST:event_CC13ActionPerformed

    private void txtS15FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS15FocusGained
        // TODO add your handling code here:
        if( txtS15.getText().equals("0")){
            txtS15.setText("");
            txtS15.setForeground(Color.BLACK);
            txtS15.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS15FocusGained

    private void txtS15FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS15FocusLost
        // TODO add your handling code here:
        if( txtS15.getText().equals("")){
            txtS15.setText("0");
            txtS15.setForeground(Color.GRAY);
            txtS15.setFont(new Font("TimesRoman", Font.ITALIC, 14));
        }
    }//GEN-LAST:event_txtS15FocusLost

    private void txtS15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtS15MouseClicked
        // TODO add your handling code here:
        if( txtS15.getText().equals("0")){
            txtS15.setText("");
            txtS15.setForeground(Color.BLACK);
            txtS15.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS15MouseClicked

    private void CC15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CC15ActionPerformed
        // TODO add your handling code here:

        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
            Connection connect = DriverManager.getConnection(url);
            Statement st = connect.createStatement();
            ResultSet rs = st.executeQuery("select * from Course_vw_Table");

            //CC15.removeAllItems();
            //CC15.addItem("-- select --");
            while(rs.next()){

                if(CC15.getSelectedItem().equals(rs.getString("Course_Code"))){

                    txtU15.setText(rs.getString("Course_Unit"));
                }

            }
            connect.close();

        }catch(Exception Error){

            JOptionPane.showMessageDialog(null, Error);
        }
    }//GEN-LAST:event_CC15ActionPerformed

    private void txtS12FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS12FocusGained
        // TODO add your handling code here:
        if( txtS12.getText().equals("0")){
            txtS12.setText("");
            txtS12.setForeground(Color.BLACK);
            txtS12.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS12FocusGained

    private void txtS12FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtS12FocusLost
        // TODO add your handling code here:
        if( txtS12.getText().equals("")){
            txtS12.setText("0");
            txtS12.setForeground(Color.GRAY);
            txtS12.setFont(new Font("TimesRoman", Font.ITALIC, 14));
        }
    }//GEN-LAST:event_txtS12FocusLost

    private void txtS12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtS12MouseClicked
        // TODO add your handling code here:
        if( txtS12.getText().equals("0")){
            txtS12.setText("");
            txtS12.setForeground(Color.BLACK);
            txtS12.setFont(new Font("TimesRoman", Font.PLAIN, 14));
        }
    }//GEN-LAST:event_txtS12MouseClicked

    private void CC16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CC16ActionPerformed
        // TODO add your handling code here:

        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
            Connection connect = DriverManager.getConnection(url);
            Statement st = connect.createStatement();
            ResultSet rs = st.executeQuery("select * from Course_vw_Table");

            //CC16.removeAllItems();
            //CC16.addItem("-- select --");
            while(rs.next()){

                if(CC16.getSelectedItem().equals(rs.getString("Course_Code"))){

                    txtU16.setText(rs.getString("Course_Unit"));
                }

            }
            connect.close();

        }catch(Exception Error){

            JOptionPane.showMessageDialog(null, Error);
        }
    }//GEN-LAST:event_CC16ActionPerformed

    private void txtFacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFacultyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFacultyActionPerformed

    private void drpNOCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drpNOCActionPerformed
        // TODO add your handling code here:
        if(drpNOC.getSelectedItem().equals("-- select --")){
            CP1.setVisible(false);
            CP2.setVisible(false);
            CP3.setVisible(false);
            CP4.setVisible(false);
            CP5.setVisible(false);
            CP6.setVisible(false);
            CP7.setVisible(false);
            CP8.setVisible(false);
            CP9.setVisible(false);
            CP10.setVisible(false);
            CP11.setVisible(false);
            CP12.setVisible(false);
            CP13.setVisible(false);
            CP14.setVisible(false);
            CP15.setVisible(false);
            CP16.setVisible(false);

            lblTUCP.setVisible(false);
            lblTCP.setVisible(false);
            lblTNUP.setVisible(false);
            lblTUP.setVisible(false);

            lblTUNIT.setVisible(false);
            lblMSG.setVisible(true);
            lblTU.setVisible(false);
            lblGPA.setVisible(false);
            lblGP.setVisible(false);
            lblCGPA.setVisible(false);
            lblCGP.setVisible(false);
            lblRM.setVisible(false);
            lblTCP1.setVisible(false);
            btnCompt.setVisible(false);

        }else if(drpNOC.getSelectedItem().equals("1")){
            CP1.setVisible(true);
            CP2.setVisible(false);
            CP3.setVisible(false);
            CP4.setVisible(false);
            CP5.setVisible(false);
            CP6.setVisible(false);
            CP7.setVisible(false);
            CP8.setVisible(false);
            CP9.setVisible(false);
            CP10.setVisible(false);
            CP11.setVisible(false);
            CP12.setVisible(false);
            CP13.setVisible(false);
            CP14.setVisible(false);
            CP15.setVisible(false);
            CP16.setVisible(false);

            lblTUCP.setVisible(true);
            lblTCP.setVisible(true);
            lblTNUP.setVisible(true);
            lblTUP.setVisible(true);
            lblCGPA.setVisible(true);
            lblCGP.setVisible(true);

            lblTUNIT.setVisible(true);
            lblMSG.setVisible(false);
            lblTU.setVisible(true);
            lblGPA.setVisible(true);
            lblRM.setVisible(true);
            lblTCP1.setVisible(true);
            lblGP.setVisible(true);
            btnCompt.setVisible(true);

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                //CC1.removeAllItems();
                //CC1.addItem("-- select --");
                
                while(rs.next()){

                    CC1.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

        }else if(drpNOC.getSelectedItem().equals("2")){
            CP1.setVisible(true);
            CP2.setVisible(true);
            CP3.setVisible(false);
            CP4.setVisible(false);
            CP5.setVisible(false);
            CP6.setVisible(false);
            CP7.setVisible(false);
            CP8.setVisible(false);
            CP9.setVisible(false);
            CP10.setVisible(false);
            CP11.setVisible(false);
            CP12.setVisible(false);
            CP13.setVisible(false);
            CP14.setVisible(false);
            CP15.setVisible(false);
            CP16.setVisible(false);

            lblTUNIT.setVisible(true);
            lblMSG.setVisible(false);
            lblTU.setVisible(true);
            lblGPA.setVisible(true);
            lblGP.setVisible(true);
            btnCompt.setVisible(true);

            lblTUCP.setVisible(true);
            lblTCP1.setVisible(true);
            lblTCP.setVisible(true);
            lblCGPA.setVisible(true);
            lblCGP.setVisible(true);
            lblRM.setVisible(true);
            lblTNUP.setVisible(true);
            lblTUP.setVisible(true);

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC1.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC2.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
        }else if(drpNOC.getSelectedItem().equals("3")){
            CP1.setVisible(true);
            CP2.setVisible(true);
            CP3.setVisible(true);
            CP4.setVisible(false);
            CP5.setVisible(false);
            CP6.setVisible(false);
            CP7.setVisible(false);
            CP8.setVisible(false);
            CP9.setVisible(false);
            CP10.setVisible(false);
            CP11.setVisible(false);
            CP12.setVisible(false);
            CP13.setVisible(false);
            CP14.setVisible(false);
            CP15.setVisible(false);
            CP16.setVisible(false);

            lblTUNIT.setVisible(true);
            lblMSG.setVisible(false);
            lblTU.setVisible(true);
            lblRM.setVisible(true);
            lblGPA.setVisible(true);
            lblCGPA.setVisible(true);
            lblCGP.setVisible(true);
            lblGP.setVisible(true);
            btnCompt.setVisible(true);

            lblTUCP.setVisible(true);
            lblTCP.setVisible(true);
            lblTCP1.setVisible(true);
            lblTNUP.setVisible(true);
            lblTUP.setVisible(true);

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC1.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC2.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC3.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

        }else if(drpNOC.getSelectedItem().equals("4")){
            CP1.setVisible(true);
            CP2.setVisible(true);
            CP3.setVisible(true);
            CP4.setVisible(true);
            CP5.setVisible(false);
            CP6.setVisible(false);
            CP7.setVisible(false);
            CP8.setVisible(false);
            CP9.setVisible(false);
            CP10.setVisible(false);
            CP11.setVisible(false);
            CP12.setVisible(false);
            CP13.setVisible(false);
            CP14.setVisible(false);
            CP15.setVisible(false);
            CP16.setVisible(false);

            lblTUCP.setVisible(true);
            lblTCP.setVisible(true);
            lblTNUP.setVisible(true);
            lblTCP1.setVisible(true);
            lblTUP.setVisible(true);
            lblCGPA.setVisible(true);
            lblCGP.setVisible(true);
            lblRM.setVisible(true);

            lblTUNIT.setVisible(true);
            lblMSG.setVisible(false);
            lblTU.setVisible(true);
            lblGPA.setVisible(true);
            lblGP.setVisible(true);
            btnCompt.setVisible(true);

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC1.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC2.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC3.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC4.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
        }else if(drpNOC.getSelectedItem().equals("5")){
            CP1.setVisible(true);
            CP2.setVisible(true);
            CP3.setVisible(true);
            CP4.setVisible(true);
            CP5.setVisible(true);
            CP6.setVisible(false);
            CP7.setVisible(false);
            CP8.setVisible(false);
            CP9.setVisible(false);
            CP10.setVisible(false);
            CP11.setVisible(false);
            CP12.setVisible(false);
            CP13.setVisible(false);
            CP14.setVisible(false);
            CP15.setVisible(false);
            CP16.setVisible(false);

            lblTUNIT.setVisible(true);
            lblMSG.setVisible(false);
            lblTU.setVisible(true);
            lblTCP1.setVisible(true);
            lblGPA.setVisible(true);
            lblCGPA.setVisible(true);
            lblCGP.setVisible(true);
            lblGP.setVisible(true);
            btnCompt.setVisible(true);

            lblTUCP.setVisible(true);
            lblRM.setVisible(true);
            lblTCP.setVisible(true);
            lblTNUP.setVisible(true);
            lblTUP.setVisible(true);

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC1.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC2.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC3.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC4.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC5.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
        }else if(drpNOC.getSelectedItem().equals("6")){
            CP1.setVisible(true);
            CP2.setVisible(true);
            CP3.setVisible(true);
            CP4.setVisible(true);
            CP5.setVisible(true);
            CP6.setVisible(true);
            CP7.setVisible(false);
            CP8.setVisible(false);
            CP9.setVisible(false);
            CP10.setVisible(false);
            CP11.setVisible(false);
            CP12.setVisible(false);
            CP13.setVisible(false);
            CP14.setVisible(false);
            CP15.setVisible(false);
            CP16.setVisible(false);

            lblTUNIT.setVisible(true);
            lblMSG.setVisible(false);
            lblTU.setVisible(true);
            lblCGPA.setVisible(true);
            lblCGP.setVisible(true);
            lblTCP1.setVisible(true);
            lblGPA.setVisible(true);
            lblGP.setVisible(true);
            lblRM.setVisible(true);
            btnCompt.setVisible(true);

            lblTUCP.setVisible(true);
            lblTCP.setVisible(true);
            lblTNUP.setVisible(true);
            lblTUP.setVisible(true);

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC1.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC2.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC3.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC4.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC5.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC6.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

        }else if(drpNOC.getSelectedItem().equals("7")){
            CP1.setVisible(true);
            CP2.setVisible(true);
            CP3.setVisible(true);
            CP4.setVisible(true);
            CP5.setVisible(true);
            CP6.setVisible(true);
            CP7.setVisible(true);
            CP8.setVisible(false);
            CP9.setVisible(false);
            CP10.setVisible(false);
            CP11.setVisible(false);
            CP12.setVisible(false);
            CP13.setVisible(false);
            CP14.setVisible(false);
            CP15.setVisible(false);
            CP16.setVisible(false);

            lblTUNIT.setVisible(true);
            lblMSG.setVisible(false);
            lblTU.setVisible(true);
            lblTCP1.setVisible(true);
            lblGPA.setVisible(true);
            lblGP.setVisible(true);
            lblCGPA.setVisible(true);
            lblCGP.setVisible(true);
            btnCompt.setVisible(true);

            lblTUCP.setVisible(true);
            lblTCP.setVisible(true);
            lblRM.setVisible(true);
            lblTNUP.setVisible(true);
            lblTUP.setVisible(true);

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC1.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC2.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC3.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC4.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC5.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC6.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC7.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

        }else if(drpNOC.getSelectedItem().equals("8")){
            CP1.setVisible(true);
            CP2.setVisible(true);
            CP3.setVisible(true);
            CP4.setVisible(true);
            CP5.setVisible(true);
            CP6.setVisible(true);
            CP7.setVisible(true);
            CP8.setVisible(true);
            CP9.setVisible(false);
            CP10.setVisible(false);
            CP11.setVisible(false);
            CP12.setVisible(false);
            CP13.setVisible(false);
            CP14.setVisible(false);
            CP15.setVisible(false);
            CP16.setVisible(false);

            lblTUCP.setVisible(true);
            lblTCP.setVisible(true);
            lblCGPA.setVisible(true);
            lblCGP.setVisible(true);
            lblTCP1.setVisible(true);
            lblTNUP.setVisible(true);
            lblTUP.setVisible(true);

            lblTUNIT.setVisible(true);
            lblMSG.setVisible(false);
            lblTU.setVisible(true);
            lblRM.setVisible(true);
            lblGPA.setVisible(true);
            lblGP.setVisible(true);
            btnCompt.setVisible(true);

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC1.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC2.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC3.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC4.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC5.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC6.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC7.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC8.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

        }else if(drpNOC.getSelectedItem().equals("9")){
            CP1.setVisible(true);
            CP2.setVisible(true);
            CP3.setVisible(true);
            CP4.setVisible(true);
            CP5.setVisible(true);
            CP6.setVisible(true);
            CP7.setVisible(true);
            CP8.setVisible(true);
            CP9.setVisible(true);
            CP10.setVisible(false);
            CP11.setVisible(false);
            CP12.setVisible(false);
            CP13.setVisible(false);
            CP14.setVisible(false);
            CP15.setVisible(false);
            CP16.setVisible(false);

            lblTUCP.setVisible(true);
            lblTCP.setVisible(true);
            lblTNUP.setVisible(true);
            lblTCP1.setVisible(true);
            lblTUP.setVisible(true);

            lblTUNIT.setVisible(true);
            lblMSG.setVisible(false);
            lblTU.setVisible(true);
            lblCGPA.setVisible(true);
            lblCGP.setVisible(true);
            lblGPA.setVisible(true);
            lblGP.setVisible(true);
            lblRM.setVisible(true);
            btnCompt.setVisible(true);

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC1.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC2.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC3.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC4.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC5.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC6.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC7.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC8.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC9.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

        }else if(drpNOC.getSelectedItem().equals("10")){
            CP1.setVisible(true);
            CP2.setVisible(true);
            CP3.setVisible(true);
            CP4.setVisible(true);
            CP5.setVisible(true);
            CP6.setVisible(true);
            CP7.setVisible(true);
            CP8.setVisible(true);
            CP9.setVisible(true);
            CP10.setVisible(true);
            CP11.setVisible(false);
            CP12.setVisible(false);
            CP13.setVisible(false);
            CP14.setVisible(false);
            CP15.setVisible(false);
            CP16.setVisible(false);

            lblTUCP.setVisible(true);
            lblTCP.setVisible(true);
            lblTCP1.setVisible(true);
            lblTNUP.setVisible(true);
            lblTUP.setVisible(true);
            lblCGPA.setVisible(true);
            lblCGP.setVisible(true);

            lblTUNIT.setVisible(true);
            lblMSG.setVisible(false);
            lblTU.setVisible(true);
            lblRM.setVisible(true);
            lblGPA.setVisible(true);
            lblGP.setVisible(true);
            btnCompt.setVisible(true);

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC1.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC2.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC3.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC4.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC5.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC6.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC7.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC8.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC9.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC10.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

        }else if(drpNOC.getSelectedItem().equals("11")){
            CP1.setVisible(true);
            CP2.setVisible(true);
            CP3.setVisible(true);
            CP4.setVisible(true);
            CP5.setVisible(true);
            CP6.setVisible(true);
            CP7.setVisible(true);
            CP8.setVisible(true);
            CP9.setVisible(true);
            CP10.setVisible(true);
            CP11.setVisible(true);
            CP12.setVisible(false);
            CP13.setVisible(false);
            CP14.setVisible(false);
            CP15.setVisible(false);
            CP16.setVisible(false);

            lblTUCP.setVisible(true);
            lblTCP.setVisible(true);
            lblTCP1.setVisible(true);
            lblTNUP.setVisible(true);
            lblTUP.setVisible(true);
            lblCGPA.setVisible(true);
            lblCGP.setVisible(true);

            lblTUNIT.setVisible(true);
            lblMSG.setVisible(false);
            lblTU.setVisible(true);
            lblGPA.setVisible(true);
            lblGP.setVisible(true);
            lblRM.setVisible(true);
            btnCompt.setVisible(true);

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC1.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC2.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC3.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC4.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC5.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC6.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC7.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC8.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC9.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC10.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC11.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

        }else if(drpNOC.getSelectedItem().equals("12")){
            CP1.setVisible(true);
            CP2.setVisible(true);
            CP3.setVisible(true);
            CP4.setVisible(true);
            CP5.setVisible(true);
            CP6.setVisible(true);
            CP7.setVisible(true);
            CP8.setVisible(true);
            CP9.setVisible(true);
            CP10.setVisible(true);
            CP11.setVisible(true);
            CP12.setVisible(true);
            CP13.setVisible(false);
            CP14.setVisible(false);
            CP15.setVisible(false);
            CP16.setVisible(false);

            lblTUCP.setVisible(true);
            lblTCP.setVisible(true);
            lblTNUP.setVisible(true);
            lblTUP.setVisible(true);
            lblTCP1.setVisible(true);

            lblTUNIT.setVisible(true);
            lblMSG.setVisible(false);
            lblTU.setVisible(true);
            lblRM.setVisible(true);
            lblGPA.setVisible(true);
            lblCGPA.setVisible(true);
            lblCGP.setVisible(true);
            lblGP.setVisible(true);
            btnCompt.setVisible(true);

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC1.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC2.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC3.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC4.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC5.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC6.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC7.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC8.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC9.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC10.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC11.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC12.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

        }else if(drpNOC.getSelectedItem().equals("13")){
            CP1.setVisible(true);
            CP2.setVisible(true);
            CP3.setVisible(true);
            CP4.setVisible(true);
            CP5.setVisible(true);
            CP6.setVisible(true);
            CP7.setVisible(true);
            CP8.setVisible(true);
            CP9.setVisible(true);
            CP10.setVisible(true);
            CP11.setVisible(true);
            CP12.setVisible(true);
            CP13.setVisible(true);
            CP14.setVisible(false);
            CP15.setVisible(false);
            CP16.setVisible(false);

            lblTUCP.setVisible(true);
            lblTCP.setVisible(true);
            lblTNUP.setVisible(true);
            lblTCP1.setVisible(true);
            lblTUP.setVisible(true);

            lblTUNIT.setVisible(true);
            lblMSG.setVisible(false);
            lblTU.setVisible(true);
            lblGPA.setVisible(true);
            lblRM.setVisible(true);
            lblCGPA.setVisible(true);
            lblCGP.setVisible(true);
            lblGP.setVisible(true);
            btnCompt.setVisible(true);

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC1.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC2.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC3.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC4.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC5.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC6.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC7.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC8.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC9.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC10.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC11.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC12.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC13.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

        }else if(drpNOC.getSelectedItem().equals("14")){
            CP1.setVisible(true);
            CP2.setVisible(true);
            CP3.setVisible(true);
            CP4.setVisible(true);
            CP5.setVisible(true);
            CP6.setVisible(true);
            CP7.setVisible(true);
            CP8.setVisible(true);
            CP9.setVisible(true);
            CP10.setVisible(true);
            CP11.setVisible(true);
            CP12.setVisible(true);
            CP13.setVisible(true);
            CP14.setVisible(true);
            CP15.setVisible(false);
            CP16.setVisible(false);

            lblTUCP.setVisible(true);
            lblTCP.setVisible(true);
            lblTNUP.setVisible(true);
            lblTCP1.setVisible(true);
            lblTUP.setVisible(true);
            lblCGPA.setVisible(true);
            lblCGP.setVisible(true);

            lblTUNIT.setVisible(true);
            lblMSG.setVisible(false);
            lblTU.setVisible(true);
            lblGPA.setVisible(true);
            lblGP.setVisible(true);
            lblRM.setVisible(true);
            btnCompt.setVisible(true);

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC1.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC2.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC3.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC4.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC5.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC6.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC7.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC8.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC9.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC10.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC11.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC12.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC13.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC14.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
        }else if(drpNOC.getSelectedItem().equals("15")){
            CP1.setVisible(true);
            CP2.setVisible(true);
            CP3.setVisible(true);
            CP4.setVisible(true);
            CP5.setVisible(true);
            CP6.setVisible(true);
            CP7.setVisible(true);
            CP8.setVisible(true);
            CP9.setVisible(true);
            CP10.setVisible(true);
            CP11.setVisible(true);
            CP12.setVisible(true);
            CP13.setVisible(true);
            CP14.setVisible(true);
            CP15.setVisible(true);
            CP16.setVisible(false);

            lblTUCP.setVisible(true);
            lblTCP.setVisible(true);
            lblTNUP.setVisible(true);
            lblTCP1.setVisible(true);
            lblTUP.setVisible(true);

            lblTUNIT.setVisible(true);
            lblMSG.setVisible(false);
            lblTU.setVisible(true);
            lblCGPA.setVisible(true);
            lblCGP.setVisible(true);
            lblGPA.setVisible(true);
            lblGP.setVisible(true);
            lblRM.setVisible(true);
            btnCompt.setVisible(true);

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC1.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC2.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC3.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC4.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC5.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC6.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC7.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC8.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC9.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC10.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC11.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC12.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC13.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC14.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC15.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
        }else if(drpNOC.getSelectedItem().equals("16")){
            CP1.setVisible(true);
            CP2.setVisible(true);
            CP3.setVisible(true);
            CP4.setVisible(true);
            CP5.setVisible(true);
            CP6.setVisible(true);
            CP7.setVisible(true);
            CP8.setVisible(true);
            CP9.setVisible(true);
            CP10.setVisible(true);
            CP11.setVisible(true);
            CP12.setVisible(true);
            CP13.setVisible(true);
            CP14.setVisible(true);
            CP15.setVisible(true);
            CP16.setVisible(true);

            lblTUCP.setVisible(true);
            lblTCP.setVisible(true);
            lblTNUP.setVisible(true);
            lblTCP1.setVisible(true);
            lblTUP.setVisible(true);

            lblTUNIT.setVisible(true);
            lblMSG.setVisible(false);
            lblTU.setVisible(true);
            lblCGPA.setVisible(true);
            lblCGP.setVisible(true);
            lblRM.setVisible(true);
            lblGPA.setVisible(true);
            lblGP.setVisible(true);
            btnCompt.setVisible(true);

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC1.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC2.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC3.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC4.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC5.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC6.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC7.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC8.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC9.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC10.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC11.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC12.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC13.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC14.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC15.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                Connection connect = DriverManager.getConnection(url);
                Statement st = connect.createStatement();
                ResultSet rs = st.executeQuery("select * from Course_vw_Table where Department = '"+ txtDepart.getText() +"'");

                while(rs.next()){

                    CC16.addItem(rs.getString("Course_Code"));

                }
                connect.close();

            }catch(Exception Error){

                JOptionPane.showMessageDialog(null, Error);
            }
        }

    }//GEN-LAST:event_drpNOCActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
       
///////////////////////////////////////////////////////////////////////////////
        if(drpNOC.getSelectedItem().equals("1")){
            if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
            try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP1_Table" + "(Names, Matric_No, "+ CC1.getSelectedItem() +", TCP, TNUR, TNUP, GPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    //if(rs4.next()){
                    //    pst.setString(3, txtS1.getText());
                    //}
                    
                    pst.setString(3, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(4, lblTUCP.getText());
                    pst.setString(5, lblTU.getText());
                    pst.setString(6, lblTUP.getText());
                    pst.setString(7, lblGPA.getText());
                    pst.setString(8, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(9, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(10, lblRM.getText());

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }

                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){
            try{

            //System.out.println(TSS22 + TCP2 + TSU2 + TNUP2);
            
                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP2_Table" + "(Names, Matric_No, SRT_ID, "+ CC1.getSelectedItem() +", TCP2, TNUR2, TNUP2, GPA2, TCP_Cum, TNUR_Cum, TNUP_Cum, CGPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st2 = connect.createStatement();
                    ResultSet rs2 = st2.executeQuery("SELECT * FROM SRT_DP1_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    while(rs2.next()){
                        dd2 =rs2.getString("SRT_ID");
                        pst.setString(3, dd2);
                    }
                    //if(rs4.next()){
                    //    pst.setString(3, txtS1.getText());
                    //}
                    
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)
                    pst.setString(4, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(5, lblTUCP.getText());
                    pst.setString(6, lblTU.getText());
                    pst.setString(7, lblTUP.getText());
                    pst.setString(8, lblGPA.getText());
                    pst.setString(9, TCP2);
                    pst.setString(10, TSU2);
                    pst.setString(11, TNUP2);
                    pst.setString(12, lblCGPA.getText());
                    pst.setString(13, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(14, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(15, lblRM.getText());

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }

                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                
            }
        }
               
///////////////////////////////////////////////////////////////////////////////
        if(drpNOC.getSelectedItem().equals("2")){
            if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
            
                try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP1_Table" + "(Names, Matric_No, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", TCP, TNUR, TNUP, GPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    //if(rs4.next()){
                    //    pst.setString(3, txtS1.getText());
                    //}
                    
                    pst.setString(3, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(4, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(5, lblTUCP.getText());
                    pst.setString(6, lblTU.getText());
                    pst.setString(7, lblTUP.getText());
                    pst.setString(8, lblGPA.getText());
                    pst.setString(9, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(10, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(11, lblRM.getText());

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }
                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            }
            else if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){
            try{
                
                //Cno = Integer.parseInt(drpNOC.getSelectedItem().toString());
                //System.out.println(Cno);
                
                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP2_Table" + "(Names, Matric_No, SRT_ID, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", TCP2, TNUR2, TNUP2, GPA2, TCP_Cum, TNUR_Cum, TNUP_Cum, CGPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st2 = connect.createStatement();
                    ResultSet rs2 = st2.executeQuery("SELECT * FROM SRT_DP1_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    while(rs2.next()){
                        dd2 =rs2.getString("SRT_ID");
                        pst.setString(3, dd2);
                    }
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)
                    pst.setString(4, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(5, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(6, lblTUCP.getText());
                    pst.setString(7, lblTU.getText());
                    pst.setString(8, lblTUP.getText());
                    pst.setString(9, lblGPA.getText());
                    pst.setString(10, TCP2);
                    pst.setString(11, TSU2);
                    pst.setString(12, TNUP2);
                    pst.setString(13, lblCGPA.getText());
                    pst.setString(14, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(15, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(16, lblRM.getText());

                  
                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }
                    
                    
                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                
            }
        }
///////////////////////////////////////////////////////////////////////////////
        if(drpNOC.getSelectedItem().equals("3")){
            if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
             try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP1_Table" + "(Names, Matric_No, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", TCP, TNUR, TNUP, GPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    //if(rs4.next()){
                    //    pst.setString(3, txtS1.getText());
                    //}
                    
                    pst.setString(3, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(4, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(5, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(6, lblTUCP.getText());
                    pst.setString(7, lblTU.getText());
                    pst.setString(8, lblTUP.getText());
                    pst.setString(9, lblGPA.getText());
                    pst.setString(10, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(11, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(12, lblRM.getText());

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }
                    
                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            }
            else if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){
            try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP2_Table" + "(Names, Matric_No, SRT_ID, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", TCP2, TNUR2, TNUP2, GPA2, TCP_Cum, TNUR_Cum, TNUP_Cum, CGPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st2 = connect.createStatement();
                    ResultSet rs2 = st2.executeQuery("SELECT * FROM SRT_DP1_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    while(rs2.next()){
                        dd2 =rs2.getString("SRT_ID");
                        pst.setString(3, dd2);
                    }
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)
                    pst.setString(4, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(5, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(6, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(7, lblTUCP.getText());
                    pst.setString(8, lblTU.getText());
                    pst.setString(9, lblTUP.getText());
                    pst.setString(10, lblGPA.getText());
                    pst.setString(11, TCP2);
                    pst.setString(12, TSU2);
                    pst.setString(13, TNUP2);
                    pst.setString(14, lblCGPA.getText());
                    pst.setString(15, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(16, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(17, lblRM.getText());

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }

                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                
            }
        }
///////////////////////////////////////////////////////////////////////////////
        if(drpNOC.getSelectedItem().equals("4")){
            if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
             
                try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP1_Table" + "(Names, Matric_No, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", TCP, TNUR, TNUP, GPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    //if(rs4.next()){
                    //    pst.setString(3, txtS1.getText());
                    //}
                    
                    pst.setString(3, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(4, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(5, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(6, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(7, lblTUCP.getText());
                    pst.setString(8, lblTU.getText());
                    pst.setString(9, lblTUP.getText());
                    pst.setString(10, lblGPA.getText());
                    pst.setString(11, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(12, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(13, lblRM.getText());

                   
                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }

                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            
            }
            else if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){
            try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP2_Table" + "(Names, Matric_No, SRT_ID, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", TCP2, TNUR2, TNUP2, GPA2, TCP_Cum, TNUR_Cum, TNUP_Cum, CGPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st2 = connect.createStatement();
                    ResultSet rs2 = st2.executeQuery("SELECT * FROM SRT_DP1_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    while(rs2.next()){
                        dd2 =rs2.getString("SRT_ID");
                        pst.setString(3, dd2);
                    }
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)
                    pst.setString(4, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(5, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(6, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(7, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(8, lblTUCP.getText());
                    pst.setString(9, lblTU.getText());
                    pst.setString(10, lblTUP.getText());
                    pst.setString(11, lblGPA.getText());
                    pst.setString(12, TCP2);
                    pst.setString(13, TSU2);
                    pst.setString(14, TNUP2);
                    pst.setString(15, lblCGPA.getText());
                    pst.setString(16, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(17, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(18, lblRM.getText());

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }

                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                
            }
        }
        
///////////////////////////////////////////////////////////////////////////////
        if(drpNOC.getSelectedItem().equals("5")){
            if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
             
                 try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP1_Table" + "(Names, Matric_No, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", TCP, TNUR, TNUP, GPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    //if(rs4.next()){
                    //    pst.setString(3, txtS1.getText());
                    //}
                    
                    pst.setString(3, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(4, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(5, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(6, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(7, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(8, lblTUCP.getText());
                    pst.setString(9, lblTU.getText());
                    pst.setString(10, lblTUP.getText());
                    pst.setString(11, lblGPA.getText());
                    pst.setString(12, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(13, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(14, lblRM.getText());
                    
                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }
                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            
            
            }
            else if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){
            try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP2_Table" + "(Names, Matric_No, SRT_ID, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", TCP2, TNUR2, TNUP2, GPA2, TCP_Cum, TNUR_Cum, TNUP_Cum, CGPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st2 = connect.createStatement();
                    ResultSet rs2 = st2.executeQuery("SELECT * FROM SRT_DP1_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    while(rs2.next()){
                        dd2 =rs2.getString("SRT_ID");
                        pst.setString(3, dd2);
                    }
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)
                    pst.setString(4, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(5, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(6, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(7, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(8, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(9, lblTUCP.getText());
                    pst.setString(10, lblTU.getText());
                    pst.setString(11, lblTUP.getText());
                    pst.setString(12, lblGPA.getText());
                    pst.setString(13, TCP2);
                    pst.setString(14, TSU2);
                    pst.setString(15, TNUP2);
                    pst.setString(16, lblCGPA.getText());
                    pst.setString(17, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(18, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(19, lblRM.getText());

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }

                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                
            }
        }
         
///////////////////////////////////////////////////////////////////////////////
        if(drpNOC.getSelectedItem().equals("6")){
            if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
             
                try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP1_Table" + "(Names, Matric_No, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", TCP, TNUR, TNUP, GPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    //if(rs4.next()){
                    //    pst.setString(3, txtS1.getText());
                    //}
                    
                    pst.setString(3, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(4, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(5, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(6, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(7, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(8, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(9, lblTUCP.getText());
                    pst.setString(10, lblTU.getText());
                    pst.setString(11, lblTUP.getText());
                    pst.setString(12, lblGPA.getText());
                    pst.setString(13, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(14, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(15, lblRM.getText());

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }

                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            
            }
            else if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){
            try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP2_Table" + "(Names, Matric_No, SRT_ID, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", TCP2, TNUR2, TNUP2, GPA2, TCP_Cum, TNUR_Cum, TNUP_Cum, CGPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st2 = connect.createStatement();
                    ResultSet rs2 = st2.executeQuery("SELECT * FROM SRT_DP1_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    while(rs2.next()){
                        dd2 =rs2.getString("SRT_ID");
                        pst.setString(3, dd2);
                    }
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)
                    pst.setString(4, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(5, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(6, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(7, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(8, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(9, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(10, lblTUCP.getText());
                    pst.setString(11, lblTU.getText());
                    pst.setString(12, lblTUP.getText());
                    pst.setString(13, lblGPA.getText());
                    pst.setString(14, TCP2);
                    pst.setString(15, TSU2);
                    pst.setString(16, TNUP2);
                    pst.setString(17, lblCGPA.getText());
                    pst.setString(18, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(19, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(20, lblRM.getText());

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }
                        

                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                
            }
        }
         
///////////////////////////////////////////////////////////////////////////////
        if(drpNOC.getSelectedItem().equals("7")){
            if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
             
                try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP1_Table" + "(Names, Matric_No, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", "+ CC7.getSelectedItem() +", TCP, TNUR, TNUP, GPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    //if(rs4.next()){
                    //    pst.setString(3, txtS1.getText());
                    //}
                    
                    pst.setString(3, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(4, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(5, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(6, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(7, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(8, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(9, txtS7.getText() + " " + lblG7.getText());
                    pst.setString(10, lblTUCP.getText());
                    pst.setString(11, lblTU.getText());
                    pst.setString(12, lblTUP.getText());
                    pst.setString(13, lblGPA.getText());
                    pst.setString(14, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(15, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(16, lblRM.getText());

                   
                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }
                        

                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            }
            else if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){
            try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP2_Table" + "(Names, Matric_No, SRT_ID, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", "+ CC7.getSelectedItem() +", TCP2, TNUR2, TNUP2, GPA2, TCP_Cum, TNUR_Cum, TNUP_Cum, CGPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st2 = connect.createStatement();
                    ResultSet rs2 = st2.executeQuery("SELECT * FROM SRT_DP1_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    while(rs2.next()){
                        dd2 =rs2.getString("SRT_ID");
                        pst.setString(3, dd2);
                    }
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)
                    pst.setString(4, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(5, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(6, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(7, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(8, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(9, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(10, txtS7.getText() + " " + lblG7.getText());
                    pst.setString(11, lblTUCP.getText());
                    pst.setString(12, lblTU.getText());
                    pst.setString(13, lblTUP.getText());
                    pst.setString(14, lblGPA.getText());
                    pst.setString(15, TCP2);
                    pst.setString(16, TSU2);
                    pst.setString(17, TNUP2);
                    pst.setString(18, lblCGPA.getText());
                    pst.setString(19, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(20, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(21, lblRM.getText());

                    
                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }
                        
                        

                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                
            }
        }
        
///////////////////////////////////////////////////////////////////////////////
        if(drpNOC.getSelectedItem().equals("8")){
            if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
             
             
                try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP1_Table" + "(Names, Matric_No, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", "+ CC7.getSelectedItem() +", "+ CC8.getSelectedItem() +", TCP, TNUR, TNUP, GPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    //if(rs4.next()){
                    //    pst.setString(3, txtS1.getText());
                    //}
                    
                    pst.setString(3, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(4, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(5, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(6, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(7, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(8, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(9, txtS7.getText() + " " + lblG7.getText());
                    pst.setString(10, txtS8.getText() + " " + lblG8.getText());
                    pst.setString(11, lblTUCP.getText());
                    pst.setString(12, lblTU.getText());
                    pst.setString(13, lblTUP.getText());
                    pst.setString(14, lblGPA.getText());
                    pst.setString(15, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(16, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(17, lblRM.getText());

                    
                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }
                        
                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            }
            else if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){
            try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP2_Table" + "(Names, Matric_No, SRT_ID, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", "+ CC7.getSelectedItem() +", "+ CC8.getSelectedItem() +", TCP2, TNUR2, TNUP2, GPA2, TCP_Cum, TNUR_Cum, TNUP_Cum, CGPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st2 = connect.createStatement();
                    ResultSet rs2 = st2.executeQuery("SELECT * FROM SRT_DP1_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    while(rs2.next()){
                        dd2 =rs2.getString("SRT_ID");
                        pst.setString(3, dd2);
                    }
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)
                    pst.setString(4, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(5, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(6, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(7, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(8, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(9, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(10, txtS7.getText() + " " + lblG7.getText());
                    pst.setString(11, txtS8.getText() + " " + lblG8.getText());
                    pst.setString(12, lblTUCP.getText());
                    pst.setString(13, lblTU.getText());
                    pst.setString(14, lblTUP.getText());
                    pst.setString(15, lblGPA.getText());
                    pst.setString(16, TCP2);
                    pst.setString(17, TSU2);
                    pst.setString(18, TNUP2);
                    pst.setString(19, lblCGPA.getText());
                    pst.setString(20, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(21, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(22, lblRM.getText());

                    
                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }

                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                
            }
        }
        
///////////////////////////////////////////////////////////////////////////////
        if(drpNOC.getSelectedItem().equals("9")){
            if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
             
            
                try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP1_Table" + "(Names, Matric_No, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", "+ CC7.getSelectedItem() +", "+ CC8.getSelectedItem() +", "+ CC9.getSelectedItem() +", TCP, TNUR, TNUP, GPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    //if(rs4.next()){
                    //    pst.setString(3, txtS1.getText());
                    //}
                    
                    pst.setString(3, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(4, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(5, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(6, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(7, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(8, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(9, txtS7.getText() + " " + lblG7.getText());
                    pst.setString(10, txtS8.getText() + " " + lblG8.getText());
                    pst.setString(11, txtS9.getText() + " " + lblG9.getText());
                    pst.setString(12, lblTUCP.getText());
                    pst.setString(13, lblTU.getText());
                    pst.setString(14, lblTUP.getText());
                    pst.setString(15, lblGPA.getText());
                    pst.setString(16, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(17, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(18, lblRM.getText());

                    
                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }

                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            
            }
            else if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){
            try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP2_Table" + "(Names, Matric_No, SRT_ID, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", "+ CC7.getSelectedItem() +", "+ CC8.getSelectedItem() +", "+ CC9.getSelectedItem() +", TCP2, TNUR2, TNUP2, GPA2, TCP_Cum, TNUR_Cum, TNUP_Cum, CGPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st2 = connect.createStatement();
                    ResultSet rs2 = st2.executeQuery("SELECT * FROM SRT_DP1_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    while(rs2.next()){
                        dd2 =rs2.getString("SRT_ID");
                        pst.setString(3, dd2);
                    }
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)
                    pst.setString(4, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(5, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(6, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(7, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(8, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(9, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(10, txtS7.getText() + " " + lblG7.getText());
                    pst.setString(11, txtS8.getText() + " " + lblG8.getText());
                    pst.setString(12, txtS9.getText() + " " + lblG9.getText());
                    pst.setString(13, lblTUCP.getText());
                    pst.setString(14, lblTU.getText());
                    pst.setString(15, lblTUP.getText());
                    pst.setString(16, lblGPA.getText());
                    pst.setString(17, TCP2);
                    pst.setString(18, TSU2);
                    pst.setString(19, TNUP2);
                    pst.setString(20, lblCGPA.getText());
                    pst.setString(21, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(22, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(23, lblRM.getText());

                    
                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }

                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                
            }
        }

///////////////////////////////////////////////////////////////////////////////
        if(drpNOC.getSelectedItem().equals("10")){
            if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
             
            
                try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP1_Table" + "(Names, Matric_No, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", "+ CC7.getSelectedItem() +", "+ CC8.getSelectedItem() +", "+ CC9.getSelectedItem() +", "+ CC10.getSelectedItem() +", TCP, TNUR, TNUP, GPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    //if(rs4.next()){
                    //    pst.setString(3, txtS1.getText());
                    //}
                    
                    pst.setString(3, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(4, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(5, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(6, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(7, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(8, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(9, txtS7.getText() + " " + lblG7.getText());
                    pst.setString(10, txtS8.getText() + " " + lblG8.getText());
                    pst.setString(11, txtS9.getText() + " " + lblG9.getText());
                    pst.setString(12, txtS7.getText() + " " + lblG10.getText());
                    pst.setString(13, lblTUCP.getText());
                    pst.setString(14, lblTU.getText());
                    pst.setString(15, lblTUP.getText());
                    pst.setString(16, lblGPA.getText());
                    pst.setString(17, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(18, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(19, lblRM.getText());

                    
                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }
                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            
            }
            else if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){
            try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP2_Table" + "(Names, Matric_No, SRT_ID, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", "+ CC7.getSelectedItem() +", "+ CC8.getSelectedItem() +", "+ CC9.getSelectedItem() +", "+ CC10.getSelectedItem() +", TCP2, TNUR2, TNUP2, GPA2, TCP_Cum, TNUR_Cum, TNUP_Cum, CGPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st2 = connect.createStatement();
                    ResultSet rs2 = st2.executeQuery("SELECT * FROM SRT_DP1_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    while(rs2.next()){
                        dd2 =rs2.getString("SRT_ID");
                        pst.setString(3, dd2);
                    }
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)
                    pst.setString(4, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(5, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(6, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(7, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(8, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(9, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(10, txtS7.getText() + " " + lblG7.getText());
                    pst.setString(11, txtS8.getText() + " " + lblG8.getText());
                    pst.setString(12, txtS9.getText() + " " + lblG9.getText());
                    pst.setString(13, txtS7.getText() + " " + lblG10.getText());
                    pst.setString(14, lblTUCP.getText());
                    pst.setString(15, lblTU.getText());
                    pst.setString(16, lblTUP.getText());
                    pst.setString(17, lblGPA.getText());
                    pst.setString(18, TCP2);
                    pst.setString(19, TSU2);
                    pst.setString(20, TNUP2);
                    pst.setString(21, lblCGPA.getText());
                    pst.setString(22, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(23, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(24, lblRM.getText());

                    
                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }

                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                
            }
        }
         
///////////////////////////////////////////////////////////////////////////////
        if(drpNOC.getSelectedItem().equals("11")){
            if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
               try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP1_Table" + "(Names, Matric_No, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", "+ CC7.getSelectedItem() +", "+ CC8.getSelectedItem() +", "+ CC9.getSelectedItem() +", "+ CC10.getSelectedItem() +", "+ CC11.getSelectedItem() +", TCP, TNUR, TNUP, GPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    //if(rs4.next()){
                    //    pst.setString(3, txtS1.getText());
                    //}
                    
                    pst.setString(3, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(4, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(5, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(6, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(7, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(8, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(9, txtS7.getText() + " " + lblG7.getText());
                    pst.setString(10, txtS8.getText() + " " + lblG8.getText());
                    pst.setString(11, txtS9.getText() + " " + lblG9.getText());
                    pst.setString(12, txtS7.getText() + " " + lblG10.getText());
                    pst.setString(13, txtS10.getText() + " " + lblG11.getText());
                    pst.setString(14, lblTUCP.getText());
                    pst.setString(15, lblTU.getText());
                    pst.setString(16, lblTUP.getText());
                    pst.setString(17, lblGPA.getText());
                    pst.setString(18, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(19, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(20, lblRM.getText());

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }

                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            
            }
            else if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){
            try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP2_Table" + "(Names, Matric_No, SRT_ID, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", "+ CC7.getSelectedItem() +", "+ CC8.getSelectedItem() +", "+ CC9.getSelectedItem() +", "+ CC10.getSelectedItem() +", "+ CC11.getSelectedItem() +", TCP2, TNUR2, TNUP2, GPA2, TCP_Cum, TNUR_Cum, TNUP_Cum, CGPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st2 = connect.createStatement();
                    ResultSet rs2 = st2.executeQuery("SELECT * FROM SRT_DP1_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    while(rs2.next()){
                        dd2 =rs2.getString("SRT_ID");
                        pst.setString(3, dd2);
                    }
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)
                    pst.setString(4, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(5, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(6, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(7, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(8, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(9, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(10, txtS7.getText() + " " + lblG7.getText());
                    pst.setString(11, txtS8.getText() + " " + lblG8.getText());
                    pst.setString(12, txtS9.getText() + " " + lblG9.getText());
                    pst.setString(13, txtS7.getText() + " " + lblG10.getText());
                    pst.setString(14, txtS10.getText() + " " + lblG11.getText());
                    pst.setString(15, lblTUCP.getText());
                    pst.setString(16, lblTU.getText());
                    pst.setString(17, lblTUP.getText());
                    pst.setString(18, lblGPA.getText());
                    pst.setString(19, TCP2);
                    pst.setString(20, TSU2);
                    pst.setString(21, TNUP2);
                    pst.setString(22, lblCGPA.getText());
                    pst.setString(23, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(24, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(25, lblRM.getText());
                    pst.executeUpdate();

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }


                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                
            }
        }
         
         
///////////////////////////////////////////////////////////////////////////////
        if(drpNOC.getSelectedItem().equals("12")){
            if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
              
                try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP1_Table" + "(Names, Matric_No, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", "+ CC7.getSelectedItem() +", "+ CC8.getSelectedItem() +", "+ CC9.getSelectedItem() +", "+ CC10.getSelectedItem() +", "+ CC11.getSelectedItem() +", "+ CC12.getSelectedItem() +", TCP, TNUR, TNUP, GPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    //if(rs4.next()){
                    //    pst.setString(3, txtS1.getText());
                    //}
                    
                    pst.setString(3, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(4, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(5, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(6, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(7, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(8, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(9, txtS7.getText() + " " + lblG7.getText());
                    pst.setString(10, txtS8.getText() + " " + lblG8.getText());
                    pst.setString(11, txtS9.getText() + " " + lblG9.getText());
                    pst.setString(12, txtS7.getText() + " " + lblG10.getText());
                    pst.setString(13, txtS10.getText() + " " + lblG11.getText());
                    pst.setString(14, txtS16.getText() + " " + lblG12.getText());
                    pst.setString(15, lblTUCP.getText());
                    pst.setString(16, lblTU.getText());
                    pst.setString(17, lblTUP.getText());
                    pst.setString(18, lblGPA.getText());
                    pst.setString(19, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(20, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(21, lblRM.getText());

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }



                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            
            
            }
            else if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){
            try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP2_Table" + "(Names, Matric_No, SRT_ID, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", "+ CC7.getSelectedItem() +", "+ CC8.getSelectedItem() +", "+ CC9.getSelectedItem() +", "+ CC10.getSelectedItem() +", "+ CC11.getSelectedItem() +", "+ CC12.getSelectedItem() +", TCP2, TNUR2, TNUP2, GPA2, TCP_Cum, TNUR_Cum, TNUP_Cum, CGPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st2 = connect.createStatement();
                    ResultSet rs2 = st2.executeQuery("SELECT * FROM SRT_DP1_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    while(rs2.next()){
                        dd2 =rs2.getString("SRT_ID");
                        pst.setString(3, dd2);
                    }
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)
                    pst.setString(4, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(5, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(6, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(7, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(8, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(9, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(10, txtS7.getText() + " " + lblG7.getText());
                    pst.setString(11, txtS8.getText() + " " + lblG8.getText());
                    pst.setString(12, txtS9.getText() + " " + lblG9.getText());
                    pst.setString(13, txtS7.getText() + " " + lblG10.getText());
                    pst.setString(14, txtS10.getText() + " " + lblG11.getText());
                    pst.setString(15, txtS16.getText() + " " + lblG12.getText());
                    pst.setString(16, lblTUCP.getText());
                    pst.setString(17, lblTU.getText());
                    pst.setString(18, lblTUP.getText());
                    pst.setString(19, lblGPA.getText());
                    pst.setString(20, TCP2);
                    pst.setString(21, TSU2);
                    pst.setString(22, TNUP2);
                    pst.setString(23, lblCGPA.getText());
                    pst.setString(24, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(25, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(26, lblRM.getText());
                    pst.executeUpdate();

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }



                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                
            }
        }
        
         
///////////////////////////////////////////////////////////////////////////////
        if(drpNOC.getSelectedItem().equals("13")){
            if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
              
                try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP1_Table" + "(Names, Matric_No, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", "+ CC7.getSelectedItem() +", "+ CC8.getSelectedItem() +", "+ CC9.getSelectedItem() +", "+ CC10.getSelectedItem() +", "+ CC11.getSelectedItem() +", "+ CC12.getSelectedItem() +", "+ CC13.getSelectedItem() +", TCP, TNUR, TNUP, GPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    //if(rs4.next()){
                    //    pst.setString(3, txtS1.getText());
                    //}
                    
                    pst.setString(3, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(4, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(5, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(6, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(7, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(8, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(9, txtS7.getText() + " " + lblG7.getText());
                    pst.setString(10, txtS8.getText() + " " + lblG8.getText());
                    pst.setString(11, txtS9.getText() + " " + lblG9.getText());
                    pst.setString(12, txtS7.getText() + " " + lblG10.getText());
                    pst.setString(13, txtS10.getText() + " " + lblG11.getText());
                    pst.setString(14, txtS16.getText() + " " + lblG12.getText());
                    pst.setString(15, txtS13.getText() + " " + lblG13.getText());
                    pst.setString(16, lblTUCP.getText());
                    pst.setString(17, lblTU.getText());
                    pst.setString(18, lblTUP.getText());
                    pst.setString(19, lblGPA.getText());
                    pst.setString(20, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(21, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(22, lblRM.getText());

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }


                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            
            
            }
            else if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){
            try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP2_Table" + "(Names, Matric_No, SRT_ID, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", "+ CC7.getSelectedItem() +", "+ CC8.getSelectedItem() +", "+ CC9.getSelectedItem() +", "+ CC10.getSelectedItem() +", "+ CC11.getSelectedItem() +", "+ CC12.getSelectedItem() +", "+ CC13.getSelectedItem() +", TCP2, TNUR2, TNUP2, GPA2, TCP_Cum, TNUR_Cum, TNUP_Cum, CGPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st2 = connect.createStatement();
                    ResultSet rs2 = st2.executeQuery("SELECT * FROM SRT_DP1_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    while(rs2.next()){
                        dd2 =rs2.getString("SRT_ID");
                        pst.setString(3, dd2);
                    }
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)
                    pst.setString(4, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(5, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(6, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(7, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(8, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(9, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(10, txtS7.getText() + " " + lblG7.getText());
                    pst.setString(11, txtS8.getText() + " " + lblG8.getText());
                    pst.setString(12, txtS9.getText() + " " + lblG9.getText());
                    pst.setString(13, txtS7.getText() + " " + lblG10.getText());
                    pst.setString(14, txtS10.getText() + " " + lblG11.getText());
                    pst.setString(15, txtS16.getText() + " " + lblG12.getText());
                    pst.setString(16, txtS13.getText() + " " + lblG13.getText());
                    pst.setString(17, lblTUCP.getText());
                    pst.setString(18, lblTU.getText());
                    pst.setString(19, lblTUP.getText());
                    pst.setString(20, lblGPA.getText());
                    pst.setString(21, TCP2);
                    pst.setString(22, TSU2);
                    pst.setString(23, TNUP2);
                    pst.setString(24, lblCGPA.getText());
                    pst.setString(25, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(26, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(27, lblRM.getText());
                    pst.executeUpdate();

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }



                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                
            }
        }
        
         
///////////////////////////////////////////////////////////////////////////////
        if(drpNOC.getSelectedItem().equals("14")){
            if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
              
               
                try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP1_Table" + "(Names, Matric_No, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", "+ CC7.getSelectedItem() +", "+ CC8.getSelectedItem() +", "+ CC9.getSelectedItem() +", "+ CC10.getSelectedItem() +", "+ CC11.getSelectedItem() +", "+ CC12.getSelectedItem() +", "+ CC13.getSelectedItem() +", "+ CC14.getSelectedItem() +", TCP, TNUR, TNUP, GPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    //if(rs4.next()){
                    //    pst.setString(3, txtS1.getText());
                    //}
                    
                    pst.setString(3, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(4, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(5, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(6, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(7, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(8, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(9, txtS7.getText() + " " + lblG7.getText());
                    pst.setString(10, txtS8.getText() + " " + lblG8.getText());
                    pst.setString(11, txtS9.getText() + " " + lblG9.getText());
                    pst.setString(12, txtS7.getText() + " " + lblG10.getText());
                    pst.setString(13, txtS10.getText() + " " + lblG11.getText());
                    pst.setString(14, txtS16.getText() + " " + lblG12.getText());
                    pst.setString(15, txtS13.getText() + " " + lblG13.getText());
                    pst.setString(16, txtS14.getText() + " " + lblG14.getText());
                    pst.setString(17, lblTUCP.getText());
                    pst.setString(18, lblTU.getText());
                    pst.setString(19, lblTUP.getText());
                    pst.setString(20, lblGPA.getText());
                    pst.setString(21, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(22, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(23, lblRM.getText());

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }


                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            
            }
            else if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){
            try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP2_Table" + "(Names, Matric_No, SRT_ID, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", "+ CC7.getSelectedItem() +", "+ CC8.getSelectedItem() +", "+ CC9.getSelectedItem() +", "+ CC10.getSelectedItem() +", "+ CC11.getSelectedItem() +", "+ CC12.getSelectedItem() +", "+ CC13.getSelectedItem() +", "+ CC14.getSelectedItem() +", TCP2, TNUR2, TNUP2, GPA2, TCP_Cum, TNUR_Cum, TNUP_Cum, CGPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st2 = connect.createStatement();
                    ResultSet rs2 = st2.executeQuery("SELECT * FROM SRT_DP1_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    while(rs2.next()){
                        dd2 =rs2.getString("SRT_ID");
                        pst.setString(3, dd2);
                    }
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)
                    pst.setString(4, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(5, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(6, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(7, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(8, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(9, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(10, txtS7.getText() + " " + lblG7.getText());
                    pst.setString(11, txtS8.getText() + " " + lblG8.getText());
                    pst.setString(12, txtS9.getText() + " " + lblG9.getText());
                    pst.setString(13, txtS7.getText() + " " + lblG10.getText());
                    pst.setString(14, txtS10.getText() + " " + lblG11.getText());
                    pst.setString(15, txtS16.getText() + " " + lblG12.getText());
                    pst.setString(16, txtS13.getText() + " " + lblG13.getText());
                    pst.setString(17, txtS14.getText() + " " + lblG14.getText());
                    pst.setString(18, lblTUCP.getText());
                    pst.setString(19, lblTU.getText());
                    pst.setString(20, lblTUP.getText());
                    pst.setString(21, lblGPA.getText());
                    pst.setString(22, TCP2);
                    pst.setString(23, TSU2);
                    pst.setString(24, TNUP2);
                    pst.setString(25, lblCGPA.getText());
                    pst.setString(26, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(27, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(28, lblRM.getText());
                    pst.executeUpdate();

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }



                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                
            }
        }
        
///////////////////////////////////////////////////////////////////////////////
        if(drpNOC.getSelectedItem().equals("15")){
            if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
              
              
                try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP1_Table" + "(Names, Matric_No, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", "+ CC7.getSelectedItem() +", "+ CC8.getSelectedItem() +", "+ CC9.getSelectedItem() +", "+ CC10.getSelectedItem() +", "+ CC11.getSelectedItem() +", "+ CC12.getSelectedItem() +", "+ CC13.getSelectedItem() +", "+ CC14.getSelectedItem() +", "+ CC15.getSelectedItem() +", TCP, TNUR, TNUP, GPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    //if(rs4.next()){
                    //    pst.setString(3, txtS1.getText());
                    //}
                    
                    pst.setString(3, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(4, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(5, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(6, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(7, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(8, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(9, txtS7.getText() + " " + lblG7.getText());
                    pst.setString(10, txtS8.getText() + " " + lblG8.getText());
                    pst.setString(11, txtS9.getText() + " " + lblG9.getText());
                    pst.setString(12, txtS7.getText() + " " + lblG10.getText());
                    pst.setString(13, txtS10.getText() + " " + lblG11.getText());
                    pst.setString(14, txtS16.getText() + " " + lblG12.getText());
                    pst.setString(15, txtS13.getText() + " " + lblG13.getText());
                    pst.setString(16, txtS14.getText() + " " + lblG14.getText());
                    pst.setString(17, txtS15.getText() + " " + lblG15.getText());
                    pst.setString(18, lblTUCP.getText());
                    pst.setString(19, lblTU.getText());
                    pst.setString(20, lblTUP.getText());
                    pst.setString(21, lblGPA.getText());
                    pst.setString(22, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(23, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(24, lblRM.getText());

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }


                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            
            }
            else if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){
            try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP2_Table" + "(Names, Matric_No, SRT_ID, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", "+ CC7.getSelectedItem() +", "+ CC8.getSelectedItem() +", "+ CC9.getSelectedItem() +", "+ CC10.getSelectedItem() +", "+ CC11.getSelectedItem() +", "+ CC12.getSelectedItem() +", "+ CC13.getSelectedItem() +", "+ CC14.getSelectedItem() +", "+ CC15.getSelectedItem() +", TCP2, TNUR2, TNUP2, GPA2, TCP_Cum, TNUR_Cum, TNUP_Cum, CGPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st2 = connect.createStatement();
                    ResultSet rs2 = st2.executeQuery("SELECT * FROM SRT_DP1_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    while(rs2.next()){
                        dd2 =rs2.getString("SRT_ID");
                        pst.setString(3, dd2);
                    }
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)
                    pst.setString(4, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(5, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(6, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(7, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(8, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(9, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(10, txtS7.getText() + " " + lblG7.getText());
                    pst.setString(11, txtS8.getText() + " " + lblG8.getText());
                    pst.setString(12, txtS9.getText() + " " + lblG9.getText());
                    pst.setString(13, txtS7.getText() + " " + lblG10.getText());
                    pst.setString(14, txtS10.getText() + " " + lblG11.getText());
                    pst.setString(15, txtS16.getText() + " " + lblG12.getText());
                    pst.setString(16, txtS13.getText() + " " + lblG13.getText());
                    pst.setString(17, txtS14.getText() + " " + lblG14.getText());
                    pst.setString(18, txtS15.getText() + " " + lblG15.getText());
                    pst.setString(19, lblTUCP.getText());
                    pst.setString(20, lblTU.getText());
                    pst.setString(21, lblTUP.getText());
                    pst.setString(22, lblGPA.getText());
                    pst.setString(23, TCP2);
                    pst.setString(24, TSU2);
                    pst.setString(25, TNUP2);
                    pst.setString(26, lblCGPA.getText());
                    pst.setString(27, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(28, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(29, lblRM.getText());
                    pst.executeUpdate();

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }

                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                
            }
        }
        
///////////////////////////////////////////////////////////////////////////////
        if(drpNOC.getSelectedItem().equals("16")){
            if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("FIRST")){
              
         
                try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP1_Table" + "(Names, Matric_No, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", "+ CC7.getSelectedItem() +", "+ CC8.getSelectedItem() +", "+ CC9.getSelectedItem() +", "+ CC10.getSelectedItem() +", "+ CC11.getSelectedItem() +", "+ CC12.getSelectedItem() +", "+ CC13.getSelectedItem() +", "+ CC14.getSelectedItem() +", "+ CC15.getSelectedItem() +", "+ CC16.getSelectedItem() +", TCP, TNUR, TNUP, GPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    //if(rs4.next()){
                    //    pst.setString(3, txtS1.getText());
                    //}
                    
                    pst.setString(3, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(4, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(5, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(6, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(7, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(8, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(9, txtS7.getText() + " " + lblG7.getText());
                    pst.setString(10, txtS8.getText() + " " + lblG8.getText());
                    pst.setString(11, txtS9.getText() + " " + lblG9.getText());
                    pst.setString(12, txtS7.getText() + " " + lblG10.getText());
                    pst.setString(13, txtS10.getText() + " " + lblG11.getText());
                    pst.setString(14, txtS16.getText() + " " + lblG12.getText());
                    pst.setString(15, txtS13.getText() + " " + lblG13.getText());
                    pst.setString(16, txtS14.getText() + " " + lblG14.getText());
                    pst.setString(17, txtS15.getText() + " " + lblG15.getText());
                    pst.setString(18, txtS12.getText() + " " + lblG16.getText());
                    pst.setString(19, lblTUCP.getText());
                    pst.setString(20, lblTU.getText());
                    pst.setString(21, lblTUP.getText());
                    pst.setString(22, lblGPA.getText());
                    pst.setString(23, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(24, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(25, lblRM.getText());

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }

                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            
            }
            else if(drpLevel.getSelectedItem().equals("100") & drpSem.getSelectedItem().equals("SECOND")){
            try{

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://localhost:1433; database=Result_DB; user=sa; password=Tunani14real;";
                    Connection connect = DriverManager.getConnection(url);
                    DatabaseMetaData metadata = connect.getMetaData();
                    //String sql = "insert into Book_Table" + "(Title, Author, Edition, Quantity, ISBN, Publisher, Yr_Of_Public)" + "Values(?,?,?,?,?,?,?)"  + " (SELECT * FROM Subject_Table WHERE Subject_ID = ?)" + " (SELECT * FROM Shelf_Table WHERE Shelf_ID= ?)";
                    String sql = "insert into SRT_DP2_Table" + "(Names, Matric_No, SRT_ID, "+ CC1.getSelectedItem() +", "+ CC2.getSelectedItem() +", "+ CC3.getSelectedItem() +", "+ CC4.getSelectedItem() +", "+ CC5.getSelectedItem() +", "+ CC6.getSelectedItem() +", "+ CC7.getSelectedItem() +", "+ CC8.getSelectedItem() +", "+ CC9.getSelectedItem() +", "+ CC10.getSelectedItem() +", "+ CC11.getSelectedItem() +", "+ CC12.getSelectedItem() +", "+ CC13.getSelectedItem() +", "+ CC14.getSelectedItem() +", "+ CC15.getSelectedItem() +", "+ CC16.getSelectedItem() +", TCP2, TNUR2, TNUP2, GPA2, TCP_Cum, TNUR_Cum, TNUP_Cum, CGPA, Level, Semester, Remarks)" + "Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
// MTH121, MTH122, CSC121, CSC125, PHY121, PHY129, EDS121, GST121, GST122, GST123, CIT121
                    Statement st1 = connect.createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM Student_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st2 = connect.createStatement();
                    ResultSet rs2 = st2.executeQuery("SELECT * FROM SRT_DP1_vw_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"'");

                    Statement st4 = connect.createStatement();
                    ResultSet rs4 = st4.executeQuery("SELECT * FROM SRT_DP1_Table WHERE Matric_No = '"+ txtMatricNo1.getText() +"' and Semester = '"+ drpSem.getSelectedItem() +"'");

                    PreparedStatement pst = connect.prepareStatement(sql);
                    pst.setString(1, txtName.getText());
                    while(rs1.next()){
                        dd =rs1.getString("Matric_No");
                        pst.setString(2, dd);
                    }
                    while(rs2.next()){
                        dd2 =rs2.getString("SRT_ID");
                        pst.setString(3, dd2);
                    }
            //Note : TSS22(CGPA)  : TCP2(Current TCP)   : TSU2(Current TNCR)   : TNUP2(Current TNUP)
                    pst.setString(4, txtS1.getText() + " " + lblG1.getText());
                    pst.setString(5, txtS2.getText() + " " + lblG2.getText());
                    pst.setString(6, txtS3.getText() + " " + lblG3.getText());
                    pst.setString(7, txtS11.getText() + " " + lblG4.getText());
                    pst.setString(8, txtS5.getText() + " " + lblG5.getText());
                    pst.setString(9, txtS6.getText() + " " + lblG6.getText());
                    pst.setString(10, txtS7.getText() + " " + lblG7.getText());
                    pst.setString(11, txtS8.getText() + " " + lblG8.getText());
                    pst.setString(12, txtS9.getText() + " " + lblG9.getText());
                    pst.setString(13, txtS7.getText() + " " + lblG10.getText());
                    pst.setString(14, txtS10.getText() + " " + lblG11.getText());
                    pst.setString(15, txtS16.getText() + " " + lblG12.getText());
                    pst.setString(16, txtS13.getText() + " " + lblG13.getText());
                    pst.setString(17, txtS14.getText() + " " + lblG14.getText());
                    pst.setString(18, txtS15.getText() + " " + lblG15.getText());
                    pst.setString(19, txtS12.getText() + " " + lblG16.getText());
                    pst.setString(20, lblTUCP.getText());
                    pst.setString(21, lblTU.getText());
                    pst.setString(22, lblTUP.getText());
                    pst.setString(23, lblGPA.getText());
                    pst.setString(24, TCP2);
                    pst.setString(25, TSU2);
                    pst.setString(26, TNUP2);
                    pst.setString(27, lblCGPA.getText());
                    pst.setString(28, String.valueOf(drpLevel.getSelectedItem()));
                    pst.setString(29, String.valueOf(drpSem.getSelectedItem()));
                    pst.setString(30, lblRM.getText());
                    pst.executeUpdate();

                    if(rs4.next()){
                            JOptionPane.showMessageDialog(this, "Result already generated for student with this Matric No '" + rs4.getString("Matric_No") + "' for '" + rs4.getString("Semester") + "' Semester");

                    }else{
                    
                        pst.executeUpdate();

                        JOptionPane.showMessageDialog(this,"New result added to the system");
                       
                        MainForm mf = new MainForm();
                        mf.setVisible(true);
                        this.setVisible(false);
                        
                      
                    }


                }
                catch(SQLException e)

                {

                    System.out.println("Could not retrieve database metadata " + e.getMessage());

                }catch (ClassNotFoundException ex) {
                    //Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                
            }
        }
           
         
    }//GEN-LAST:event_btnSaveActionPerformed

    private void drpLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drpLevelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_drpLevelActionPerformed

    private void drpSemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drpSemActionPerformed
        // TODO add your handling code here:
         
        if(drpSem.getSelectedItem().equals("FIRST")){

            lblCGP.setVisible(false);        
            lblCGPA.setVisible(false);
        
        }else{
        
            lblCGP.setVisible(true);        
            lblCGPA.setVisible(true);
        }

    }//GEN-LAST:event_drpSemActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:

        Result1 rs = new Result1();
        rs.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:

        Result2 rs = new Result2();
        rs.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton11ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JComboBox<String> CC1;
    public static javax.swing.JComboBox<String> CC10;
    public static javax.swing.JComboBox<String> CC11;
    public static javax.swing.JComboBox<String> CC12;
    public static javax.swing.JComboBox<String> CC13;
    public static javax.swing.JComboBox<String> CC14;
    public static javax.swing.JComboBox<String> CC15;
    public static javax.swing.JComboBox<String> CC16;
    public static javax.swing.JComboBox<String> CC2;
    public static javax.swing.JComboBox<String> CC3;
    public static javax.swing.JComboBox<String> CC4;
    public static javax.swing.JComboBox<String> CC5;
    public static javax.swing.JComboBox<String> CC6;
    public static javax.swing.JComboBox<String> CC7;
    public static javax.swing.JComboBox<String> CC8;
    public static javax.swing.JComboBox<String> CC9;
    private javax.swing.JPanel CP1;
    private javax.swing.JPanel CP10;
    private javax.swing.JPanel CP11;
    private javax.swing.JPanel CP12;
    private javax.swing.JPanel CP13;
    private javax.swing.JPanel CP14;
    private javax.swing.JPanel CP15;
    private javax.swing.JPanel CP16;
    private javax.swing.JPanel CP2;
    private javax.swing.JPanel CP3;
    private javax.swing.JPanel CP4;
    private javax.swing.JPanel CP5;
    private javax.swing.JPanel CP6;
    private javax.swing.JPanel CP7;
    private javax.swing.JPanel CP8;
    private javax.swing.JPanel CP9;
    public static javax.swing.JLabel F_user;
    public static javax.swing.JLabel F_user3;
    public static javax.swing.JButton btnCompt;
    public static javax.swing.JButton btnSave;
    private javax.swing.JButton btnStd;
    private javax.swing.JButton btnStds;
    public static javax.swing.JComboBox<String> drpLevel;
    public static javax.swing.JComboBox<String> drpNOC;
    public static javax.swing.JComboBox<String> drpSem;
    public static javax.swing.JPanel gnt_panel;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JLabel jLabel1;
    public static javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel lblCGP;
    private javax.swing.JLabel lblCGPA;
    private javax.swing.JLabel lblG1;
    private javax.swing.JLabel lblG10;
    private javax.swing.JLabel lblG11;
    private javax.swing.JLabel lblG12;
    private javax.swing.JLabel lblG13;
    private javax.swing.JLabel lblG14;
    private javax.swing.JLabel lblG15;
    private javax.swing.JLabel lblG16;
    private javax.swing.JLabel lblG2;
    private javax.swing.JLabel lblG3;
    private javax.swing.JLabel lblG4;
    private javax.swing.JLabel lblG5;
    private javax.swing.JLabel lblG6;
    private javax.swing.JLabel lblG7;
    private javax.swing.JLabel lblG8;
    private javax.swing.JLabel lblG9;
    private javax.swing.JLabel lblGP;
    private javax.swing.JLabel lblGPA;
    private javax.swing.JLabel lblMSG;
    private javax.swing.JLabel lblRM;
    private javax.swing.JLabel lblRM1;
    private javax.swing.JLabel lblTCP;
    private javax.swing.JLabel lblTCP1;
    private javax.swing.JLabel lblTNUP;
    private javax.swing.JLabel lblTU;
    private javax.swing.JLabel lblTUCP;
    private javax.swing.JLabel lblTUNIT;
    private javax.swing.JLabel lblTUP;
    private javax.swing.JLabel lblTime;
    public static javax.swing.JComboBox<String> sbyDepart11;
    public static javax.swing.JComboBox<String> sbyDepart12;
    public static javax.swing.JComboBox<String> sbyDepart14;
    public static javax.swing.JComboBox<String> sbyDepart18;
    public static javax.swing.JTextField txtDepart;
    public static javax.swing.JTextField txtFaculty;
    public static javax.swing.JTextField txtMatricNo1;
    public static javax.swing.JTextField txtName;
    public static javax.swing.JTextField txtProg;
    public static javax.swing.JTextField txtS1;
    public static javax.swing.JTextField txtS10;
    public static javax.swing.JTextField txtS11;
    public static javax.swing.JTextField txtS12;
    public static javax.swing.JTextField txtS13;
    public static javax.swing.JTextField txtS14;
    public static javax.swing.JTextField txtS15;
    public static javax.swing.JTextField txtS16;
    public static javax.swing.JTextField txtS2;
    public static javax.swing.JTextField txtS3;
    public static javax.swing.JTextField txtS4;
    public static javax.swing.JTextField txtS5;
    public static javax.swing.JTextField txtS6;
    public static javax.swing.JTextField txtS7;
    public static javax.swing.JTextField txtS8;
    public static javax.swing.JTextField txtS9;
    public static javax.swing.JTextField txtU1;
    public static javax.swing.JTextField txtU10;
    public static javax.swing.JTextField txtU11;
    public static javax.swing.JTextField txtU12;
    public static javax.swing.JTextField txtU13;
    public static javax.swing.JTextField txtU14;
    public static javax.swing.JTextField txtU15;
    public static javax.swing.JTextField txtU16;
    public static javax.swing.JTextField txtU2;
    public static javax.swing.JTextField txtU3;
    public static javax.swing.JTextField txtU4;
    public static javax.swing.JTextField txtU5;
    public static javax.swing.JTextField txtU6;
    public static javax.swing.JTextField txtU7;
    public static javax.swing.JTextField txtU8;
    public static javax.swing.JTextField txtU9;
    public static javax.swing.JTextField txtYear1;
    // End of variables declaration//GEN-END:variables
}
